     1                                  ; ****************************
     2                                  ; マクロ
     3                                  ; ****************************
     4                                  %include "../include/define.s"
     1                              <1> BOOT_LOAD equ 0x7c00 ; ブートプログラムのロード位置
     2                              <1> 
     3                              <1> BOOT_SIZE equ (1024 * 8) ; ブートプログラムのサイズ
     4                              <1> SECT_SIZE equ (512) ; セクタサイズ
     5                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     6                              <1> 
     7                              <1> E820_RECORD_SIZE equ 20
     5                                  %include "../include/macro.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1>     .no     resw 1 ; ドライブ番号
     3 00000002 <res 00000002>      <1>     .cyln   resw 1 ; シリンダ
     4 00000004 <res 00000002>      <1>     .head   resw 1 ; ヘッド
     5 00000006 <res 00000002>      <1>     .sect   resw 1 ; セクタ
     6                              <1> endstruc
     7                              <1> 
     8                              <1> %macro cdecl 1-*.nolist
     9                              <1>     
    10                              <1>     %rep %0 - 1
    11                              <1>         push %{-1:-1}
    12                              <1>         %rotate -1
    13                              <1>     %endrep
    14                              <1> 
    15                              <1>     %rotate -1
    16                              <1>         call %1
    17                              <1>     
    18                              <1>     %if 1 < %0
    19                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1>     %endif
    21                              <1> 
    22                              <1> %endmacro
     6                                  
     7                                  org BOOT_LOAD
     8                                  
     9                                  ; ****************************
    10                                  ; エントリーポイント
    11                                  ; ****************************
    12                                  entry:
    13 00000000 EB58                        jmp ipl
    14                                  
    15                                      ; ---------
    16                                      ; BPB (BIOS Parameter Block)
    17                                      ; ---------
    18 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    19                                  
    20                                      ; ---------
    21                                      ; IPL(Initial Program Loader)
    22                                      ; --------- 
    23                                  
    24                                  ipl:
    25                                      ; BIOSが利用した時の値がそのまま残っているので、セグメントやスタックの値を設定しなおす
    26 0000005A FA                          cli ; セグメントの初期化や割り込みの設定時に割り込みが呼ばれてほしくないので、いったん止める
    27                                  
    28 0000005B B80000                      mov ax, 0x0000
    29 0000005E 8ED8                        mov ds, ax
    30 00000060 8EC0                        mov es, ax
    31 00000062 8ED0                        mov ss, ax
    32 00000064 BC007C                      mov sp, BOOT_LOAD ; スタックはブートローダーが読み込まれた場所から上に伸びていく
    33                                  
    34 00000067 FB                          sti ; 割り込みのうけつけを再開する
    35                                  
    36 00000068 8816[BA00]                  mov [BOOT + drive.no], dl ; ドライブ番号の保存
    37                                  
    38                                      ; 文字列を表示
    39 0000006C 68[9900]E8500083C4-         cdecl puts, .s0
    39 00000074 02                 
    40                                  
    41                                      ; ハードディスクから、512~を読み出す
    42 00000075 BB0F00                      mov bx, BOOT_SECT - 1 ; 残りのブートセクタ数
    43 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE ; 次にロードされるべきアドレス
    44                                  
    45 0000007B 515368[BA00]E89E00-         cdecl read_chs, BOOT + drive, bx, cx
    45 00000083 83C406             
    46                                  
    47 00000086 39D8                        cmp ax, bx
    48                                  .10Q:
    49 00000088 740C                        jz .10E ; 指定したサイズだけ読み出しができていればよし
    50                                  .10T:
    51                                      ; そうでなかったら再起動
    52 0000008A 68[A600]E8320083C4-         cdecl puts, .e0
    52 00000092 02                 
    53 00000093 E84B00                      call reboot
    54                                  .10E:
    55 00000096 E94C02                      jmp stage_2
    56                                  
    57 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0 ; 0x0A = LF, 0x0D = CR
    57 000000A2 2E0A0D00           
    58 000000A6 4572726F723A207365-     .e0 db "Error: sector read", 0
    58 000000AF 63746F722072656164-
    58 000000B8 00                 
    59                                  
    60                                  
    61 000000B9 00                      ALIGN 2, db 0
    62                                  BOOT: ; ブートドライブに関する情報
    63                                      istruc drive
    64 000000BA 0000                            at drive.no,    dw 0
    65 000000BC 0000                            at drive.cyln,  dw 0
    66 000000BE 0000                            at drive.head,  dw 0
    67 000000C0 0200                            at drive.sect,  dw 2
    68                                      iend
    69                                  
    70                                  
    71                                  ; ****************************
    72                                  ; 最初の512バイト内の処理で必要なモジュール
    73                                  ; ****************************
    74                                  %include "../modules/real/puts.s"
     1                              <1> ; puts
     2                              <1> ; 文字列を表示する
     3                              <1> ; @params address (2 bytes) 表示文字列へのアドレス
     4                              <1> ; @returns void
     5                              <1> ; @example
     6                              <1> ; cdecl puts, .s0
     7                              <1> 
     8                              <1> puts:
     9                              <1>     ; スタックフレームの構築
    10 000000C2 55                  <1>     push bp
    11 000000C3 89E5                <1>     mov bp, sp
    12                              <1> 
    13                              <1>     ; + 4 | 文字列へのアドレス
    14                              <1>     ; + 2 | IP
    15                              <1>     ; + 0 | BP
    16                              <1>     
    17                              <1>     ; レジスタの保存
    18 000000C5 50                  <1>     push ax
    19 000000C6 53                  <1>     push bx
    20 000000C7 56                  <1>     push si
    21                              <1> 
    22                              <1>     ; save arguments
    23 000000C8 8B7604              <1>     mov si, [bp + 4]
    24                              <1> 
    25 000000CB B40E                <1>     mov ah, 0x0e   ; テレタイプ式1文字出力
    26 000000CD BB0000              <1>     mov bx, 0x0000 ; ページ番号と文字色を0に設定
    27 000000D0 FC                  <1>     cld ; DF = 0
    28                              <1> 
    29                              <1> .10L:
    30 000000D1 AC                  <1>     lodsb ; al = *si++;
    31                              <1> 
    32 000000D2 3C00                <1>     cmp al, 0
    33 000000D4 7404                <1>     je .10E
    34                              <1> 
    35 000000D6 CD10                <1>     int 0x10
    36 000000D8 EBF7                <1>     jmp .10L
    37                              <1> 
    38                              <1> .10E:
    39                              <1> 
    40                              <1>     ; restore registers
    41 000000DA 5E                  <1>     pop si
    42 000000DB 5B                  <1>     pop bx
    43 000000DC 58                  <1>     pop ax
    44                              <1> 
    45                              <1>     ; discard stack frame
    46                              <1> 
    47 000000DD 89EC                <1>     mov sp, bp
    48 000000DF 5D                  <1>     pop bp
    49                              <1> 
    50 000000E0 C3                  <1>     ret
    75                                  %include "../modules/real/reboot.s"
     1                              <1> ; reboot
     2                              <1> ; 再起動する
     3                              <1> ; @params
     4                              <1> ; @returns
     5                              <1> ; @example
     6                              <1> ;   cdecl reboot
     7                              <1> 
     8                              <1> reboot:
     9                              <1>     ; メッセージを表示
    10 000000E1 68[FD00]E8DBFF83C4- <1>     cdecl puts, .s0
    10 000000E9 02                  <1>
    11                              <1> 
    12                              <1>     ; キー入力を待つ
    13                              <1> .10L:
    14 000000EA B410                <1>     mov ah, 0x10 ; Read expanded keyboard character https://en.wikipedia.org/wiki/INT_16H
    15 000000EC CD16                <1>     int 0x16 ; キー入力を待つ
    16                              <1> 
    17 000000EE 3C20                <1>     cmp al, ' '
    18 000000F0 75F8                <1>     jne .10L
    19                              <1> 
    20                              <1>     ; 改行を出力
    21 000000F2 68[1C01]E8CAFF83C4- <1>     cdecl puts, .s1
    21 000000FA 02                  <1>
    22                              <1> 
    23                              <1>     ; 再起動
    24 000000FB CD19                <1>     int 0x19
    25                              <1> 
    26 000000FD 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot....", 0
    26 00000106 414345206B65792074- <1>
    26 0000010F 6F207265626F6F742E- <1>
    26 00000118 2E2E2E00            <1>
    27 0000011C 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    76                                  %include "../modules/real/read_chs.s"
     1                              <1> ; read_chs
     2                              <1> ; ディスクから指定したアドレスにデータを移動させる
     3                              <1> ; @params
     4                              <1> ;   drive: drive構造体のアドレス
     5                              <1> ;   sect: 読み出しセクタ数
     6                              <1> ;   dst: 読み出し先アドレス
     7                              <1> ; @returns
     8                              <1> ;   ax: 読み出したセクタ数
     9                              <1> ; @example
    10                              <1> ;   cdecl read_chs, read_chs, BOOT + drive, BOOT_SECT - 1, BOOT_LOAD + SECT_SIZE
    11                              <1> 
    12                              <1> read_chs:
    13                              <1>     ; スタックフレームの構築
    14                              <1> 
    15 00000121 55                  <1>     push bp
    16 00000122 89E5                <1>     mov bp, sp
    17 00000124 6A03                <1>     push 3 ; リトライ回数
    18 00000126 6A00                <1>     push 0 ; 読み込みセクタ数
    19                              <1> 
    20                              <1>     ;+ 8 | 読み出し先アドレス
    21                              <1>     ;+ 6 | 読み出しセクタ数
    22                              <1>     ;+ 4 | drive構造体のアドレス
    23                              <1>     ;+ 2 | IP
    24                              <1>     ;+ 0 | BP
    25                              <1>     ;- 2 | リトライ回数
    26                              <1>     ;- 4 | 読み込みセクタ数
    27                              <1> 
    28                              <1>     ; レジスタの保存
    29 00000128 53                  <1>     push bx
    30 00000129 51                  <1>     push cx
    31 0000012A 52                  <1>     push dx
    32 0000012B 06                  <1>     push es
    33 0000012C 56                  <1>     push si
    34                              <1> 
    35                              <1>     ; 処理の開始
    36 0000012D 8B7604              <1>     mov si, [bp + 4] ;si = ドライブ構造体のアドレス
    37                              <1> 
    38 00000130 8A6C02              <1>     mov ch, [si + drive.cyln + 0] ; シリンダ番号の下位バイト
    39 00000133 8A4C03              <1>     mov cl, [si + drive.cyln + 1] ; シリンダ番号の上位バイト
    40 00000136 C0E106              <1>     shl cl, 6
    41 00000139 0A4C06              <1>     or cl, [si + drive.sect]
    42                              <1> 
    43                              <1>     ; セクタ読み込み
    44 0000013C 8A7404              <1>     mov dh, [si + drive.head]
    45 0000013F 8A14                <1>     mov dl, [si + drive.no]
    46 00000141 B80000              <1>     mov ax, 0x0000
    47 00000144 8EC0                <1>     mov es, ax
    48 00000146 8B5E08              <1>     mov bx, [bp + 8] ; es(0x0000):bx(読み込み先アドレス)に読み込み
    49                              <1> 
    50                              <1> .10L:
    51 00000149 B402                <1>     mov ah, 0x02
    52 0000014B 8A4606              <1>     mov al, [bp + 6]
    53                              <1> 
    54 0000014E CD13                <1>     int 0x13
    55 00000150 7304                <1>     jnc .11E ; if failed: al = 0 && break
    56                              <1> 
    57 00000152 B000                <1>     mov al, 0
    58 00000154 EB0C                <1>     jmp .10E
    59                              <1> 
    60                              <1> .11E:
    61 00000156 3C00                <1>     cmp al, 0 ; if 読み出したセクタ数 == 0
    62 00000158 7508                <1>     jne .10E
    63                              <1> 
    64 0000015A B80000              <1>     mov ax, 0
    65 0000015D FF4EFE              <1>     dec word [bp - 2]
    66 00000160 75E7                <1>     jnz .10L ; リトライ回数だけリトライ
    67                              <1> 
    68                              <1> .10E:
    69 00000162 B400                <1>     mov ah, 0 ; ステータスは破棄
    70                              <1> 
    71                              <1>     ; レジスタの復帰
    72 00000164 5E                  <1>     pop si
    73 00000165 07                  <1>     pop es
    74 00000166 5A                  <1>     pop dx
    75 00000167 59                  <1>     pop cx
    76 00000168 5B                  <1>     pop bx
    77                              <1> 
    78                              <1>     ; スタックフレームの破棄
    79 00000169 89EC                <1>     mov sp, bp
    80 0000016B 5D                  <1>     pop bp
    81                              <1> 
    82 0000016C C3                  <1>     ret
    77                                  
    78                                  ; ****************************
    79                                  ; ブートフラグ
    80                                  ; ****************************
    81 0000016D 00<rept>                    times 510 - ($ - $$) db 0x00
    82 000001FE 55AA                        db 0x55, 0xaa
    83                                  
    84                                  ; ****************************
    85                                  ; リアルモード時に取得した情報
    86                                  ; ****************************
    87                                  FONT:
    88                                  .seg:
    89 00000200 0000                        dw 0
    90                                  .off:
    91 00000202 0000                        dw 0
    92                                  
    93                                  
    94                                  ; ****************************
    95                                  ; 512バイト以降の処理で必要なモジュール
    96                                  ; ****************************
    97                                  %include "../modules/real/itoa.s"
     1                              <1> ; itoa
     2                              <1> ; 数値を文字列に変換する
     3                              <1> ; @params
     4                              <1> ;   num: 変換する値
     5                              <1> ;   buff: 保存先アドレス
     6                              <1> ;   size: 保存先バッファサイズ
     7                              <1> ;   radix: 基数(2 or 8 or 10 or 16)
     8                              <1> ;   flags: ビット定義のフラグ
     9                              <1> ;       B2: 空白を0で埋める
    10                              <1> ;       B1: '+/-'記号を付加する
    11                              <1> ;       B0: 値を符号付き変数として扱う
    12                              <1> ; @example
    13                              <1> ;   cdecl, itoa, 8086, .s1, 8, 10, 0b0001 ; "    8086"
    14                              <1> 
    15                              <1> itoa:
    16                              <1>     ; stack frame
    17 00000204 55                  <1>     push bp
    18 00000205 89E5                <1>     mov bp, sp
    19                              <1> 
    20                              <1>     ; + 12 | flags
    21                              <1>     ; + 10 | 基数
    22                              <1>     ; +  8 | 保存先バッファサイズ
    23                              <1>     ; +  6 | 保存先アドレス
    24                              <1>     ; +  4 | 変換する値
    25                              <1>     ; +  2 | IP
    26                              <1>     ; +  0 | BP
    27                              <1> 
    28                              <1>     ; save registers
    29 00000207 50                  <1>     push ax
    30 00000208 53                  <1>     push bx
    31 00000209 51                  <1>     push cx
    32 0000020A 52                  <1>     push dx
    33 0000020B 56                  <1>     push si
    34 0000020C 57                  <1>     push di
    35                              <1> 
    36                              <1>     ; 引数を取得
    37 0000020D 8B4604              <1>     mov ax, [bp + 4]
    38 00000210 8B7606              <1>     mov si, [bp + 6]
    39 00000213 8B4E08              <1>     mov cx, [bp + 8]
    40                              <1> 
    41 00000216 89F7                <1>     mov di, si
    42 00000218 01CF                <1>     add di, cx ; dst = &dst[size - 1]
    43 0000021A 4F                  <1>     dec di
    44                              <1> 
    45 0000021B 8B5E0C              <1>     mov bx, word [bp + 12] ; flags = オプション
    46                              <1> 
    47                              <1>     ; 符号付き数値として扱うかを判定する
    48                              <1>     ; もし負の数だったらB1をtrueにする
    49 0000021E F7C30100            <1>     test bx, 0b0001
    50                              <1> .10Q:
    51 00000222 7408                <1>     je .10E ; ZF = 0(先のtest演算の結果が0になっていたら、つまり、オプションが無効であればスキップ)
    52 00000224 83F800              <1>     cmp ax, 0 ; if num < 0
    53 00000227 7D03                <1>     jge .12E
    54 00000229 83CB02              <1>     or bx, 0b0010 ; flags |= 2
    55                              <1> .12E:
    56                              <1> .10E:
    57                              <1> 
    58                              <1>     ; 符号を出力するか判定する
    59 0000022C F7C30200            <1>     test bx, 0b0010
    60                              <1> .20Q:
    61 00000230 7410                <1>     je .20E
    62 00000232 83F800              <1>     cmp ax, 0 ; if num < 0
    63                              <1> .22Q:
    64 00000235 7D07                <1>     jge .22F
    65 00000237 F7D8                <1>     neg ax ; num *= -1
    66 00000239 C6042D              <1>     mov [si], byte '-' ; 符号を表示する
    67 0000023C EB03                <1>     jmp .22E
    68                              <1> .22F:
    69 0000023E C6042B              <1>     mov [si], byte '+'    
    70                              <1> .22E:
    71 00000241 49                  <1>     dec cx ; size--
    72                              <1> .20E:
    73                              <1> 
    74                              <1> 
    75                              <1>     ; ASCII変換
    76 00000242 8B5E0A              <1>     mov bx, [bp + 10] ; 基数
    77                              <1> .30L:
    78 00000245 BA0000              <1>     mov dx, 0
    79                              <1>     ; div
    80                              <1>     ; AX = DX:AX / 基数
    81                              <1>     ; DX = DX:AX % 基数
    82 00000248 F7F3                <1>     div bx
    83                              <1> 
    84 0000024A 89D6                <1>     mov si, dx ; si = 余り
    85 0000024C 8A94[7402]          <1>     mov dl, byte [.ascii + si] ; 変換テーブルから、余り(数値)を文字に変換
    86                              <1> 
    87 00000250 8815                <1>     mov [di], dl
    88 00000252 4F                  <1>     dec di
    89                              <1> 
    90 00000253 83F800              <1>     cmp ax, 0
    91 00000256 E0ED                <1>     loopnz .30L ; ax != 0なら.30Lに戻る
    92                              <1> .30E:
    93                              <1> 
    94                              <1> 
    95                              <1>     ; 空欄を埋める
    96 00000258 83F900              <1>     cmp cx, 0
    97                              <1> .40Q:
    98 0000025B 740D                <1>     je .40E
    99 0000025D B020                <1>     mov al, ' '
   100 0000025F 837E0C04            <1>     cmp [bp + 12], word 0b0100
   101 00000263 7502                <1>     jne .42E
   102 00000265 B030                <1>     mov al, '0'
   103                              <1> .42E:
   104 00000267 FD                  <1>     std ; DF = 1 (マイナス方向に伸ばしていく)
   105 00000268 F3AA                <1>     rep stosb ; while (cx > 0) { [di] = al; di--; cx--; }
   106                              <1> .40E:
   107                              <1> 
   108                              <1>     ; レジスタの復元
   109 0000026A 5F                  <1>     pop di
   110 0000026B 5E                  <1>     pop si
   111 0000026C 5A                  <1>     pop dx
   112 0000026D 59                  <1>     pop cx
   113 0000026E 5B                  <1>     pop bx
   114 0000026F 58                  <1>     pop ax
   115                              <1> 
   116                              <1>     ; スタックフレームの破棄
   117 00000270 89EC                <1>     mov sp, bp
   118 00000272 5D                  <1>     pop bp
   119                              <1> 
   120 00000273 C3                  <1>     ret
   121                              <1> 
   122 00000274 303132333435363738- <1> .ascii db "0123456789ABCDEF"
   122 0000027D 39414243444546      <1>
    98                                  %include "../modules/real/get_drive_param.s"
     1                              <1> ; get_drive_param
     2                              <1> ; ドライブの情報を取得して、drive構造体のアドレスに置く
     3                              <1> ; @params
     4                              <1> ;   drive: drive構造体のアドレス. noを事前にセットしておく
     5                              <1> ; @return
     6                              <1> ;    ax : セクタ数
     7                              <1> ; @example
     8                              <1> ;   cdecl get_drive_param BOOT + drive
     9                              <1> 
    10                              <1> get_drive_param:
    11                              <1>     ; スタックフレーム構築
    12 00000284 55                  <1>     push bp
    13 00000285 89E5                <1>     mov bp, sp
    14                              <1> 
    15                              <1>     ; + 4 | drive構造体のアドレス
    16                              <1>     ; + 2 | IP
    17                              <1>     ; + 0 | BP
    18                              <1> 
    19                              <1>     ; レジスタの保存
    20 00000287 53                  <1>     push bx
    21 00000288 51                  <1>     push cx
    22 00000289 06                  <1>     push es
    23 0000028A 56                  <1>     push si
    24 0000028B 57                  <1>     push di
    25                              <1> 
    26                              <1>     ; INT 0x13(AH = 8)を呼び出す
    27                              <1>     ; @params DL = ドライブ番号
    28                              <1>     ; @returns 実際にアクセス可能な最終地点が帰ってくる
    29                              <1>     ;   CF : 失敗
    30                              <1>     ;   AH : リターンコード
    31                              <1>     ;   BL : FDDタイプ(1 = 360K, 2 = 1.2M, 3 = 720K, 4 = 1.44M)
    32                              <1>     ;   CL[7:6] : シリンダ(上位2bit)
    33                              <1>     ;   CH : シリンダ(下位8bit)
    34                              <1>     ;   CL[5:0] : セクタ
    35                              <1>     ;   DH : ヘッド
    36                              <1>     ;   DL : ドライブ
    37                              <1>     ;   ES:DI : ディスクベーステーブルのアドレス(詳細な情報が格納される)
    38                              <1> 
    39                              <1>     ; 処理の開始
    40 0000028C 8B7604              <1>     mov si, [bp + 4]
    41 0000028F B80000              <1>     mov ax, 0
    42 00000292 8EC0                <1>     mov es, ax
    43 00000294 89C7                <1>     mov di, ax
    44                              <1> 
    45 00000296 B408                <1>     mov ah, 8
    46 00000298 8A14                <1>     mov dl, [si + drive.no]
    47 0000029A CD13                <1>     int 0x13
    48                              <1> 
    49                              <1> .10Q:
    50 0000029C 721B                <1>     jc .10F
    51                              <1> .10T:
    52 0000029E 88C8                <1>     mov al, cl
    53 000002A0 83E03F              <1>     and ax, 0x3F ; 実際にアクセス可能な最終セクタが帰ってくる。セクタは1から番号がはじまるので
    54                              <1>                  ; 最終地点の番号がそのままセクタ数
    55                              <1> 
    56 000002A3 C0E906              <1>     shr cl, 6 ; シリンダ数の上位2ビット
    57 000002A6 C1C908              <1>     ror cx, 8 ; axレジスタのビットを右に8ビット回転させる <=> CH[1:0]CL = シリンダ数
    58 000002A9 41                  <1>     inc cx ; 実際にアクセス可能な最終シリンダが帰ってくるので、＋１でシリンダ数になる
    59                              <1> 
    60 000002AA 0FB6DE              <1>     movzx bx, dh ; ヘッド数
    61 000002AD 43                  <1>     inc bx ; 実際にアクセス可能な最終ヘッダ番号が帰ってくるので＋１でヘッダ数になる
    62                              <1> 
    63 000002AE 894C02              <1>     mov [si + drive.cyln], cx
    64 000002B1 895C04              <1>     mov [si + drive.head], bx
    65 000002B4 894406              <1>     mov [si + drive.sect], ax
    66                              <1> 
    67 000002B7 EB03                <1>     jmp .10E
    68                              <1> 
    69                              <1> .10F:
    70 000002B9 B80000              <1>     mov ax, 0
    71                              <1> 
    72                              <1> .10E:
    73                              <1>     ; レジスタの復帰
    74 000002BC 5F                  <1>     pop di
    75 000002BD 5E                  <1>     pop si
    76 000002BE 07                  <1>     pop es
    77 000002BF 59                  <1>     pop cx
    78 000002C0 5B                  <1>     pop bx
    79                              <1> 
    80                              <1>     ; スタックフレームの破棄
    81 000002C1 89EC                <1>     mov sp, bp
    82 000002C3 5D                  <1>     pop bp
    83                              <1> 
    84 000002C4 C3                  <1>     ret
    99                                  %include "../modules/real/get_font_adr.s"
     1                              <1> ; get_font_adr
     2                              <1> ; BIOSのフォントが置かれているアドレスを取得する
     3                              <1> ; @params
     4                              <1> ;   adr: フォントアドレス格納位置
     5                              <1> ; @returns
     6                              <1> ; @example
     7                              <1> ;   cdecl get_font_adr, FONT_ADDRESS
     8                              <1> 
     9                              <1> get_font_adr:
    10                              <1>     ; スタックフレームの構築
    11 000002C5 55                  <1>     push bp
    12 000002C6 89E5                <1>     mov bp, sp
    13                              <1> 
    14                              <1>     ; + 4 | フォントアドレス格納位置
    15                              <1>     ; + 2 | IP
    16                              <1>     ; + 0 | BP
    17                              <1> 
    18                              <1>     ; レジスタの保存
    19 000002C8 50                  <1>     push ax
    20 000002C9 53                  <1>     push bx
    21 000002CA 56                  <1>     push si
    22 000002CB 06                  <1>     push es
    23 000002CC 55                  <1>     push bp
    24                              <1> 
    25 000002CD 8B7604              <1>     mov si, [bp + 4]
    26                              <1> 
    27                              <1>     ; INT 0x10(AX = 0x1130)
    28                              <1>     ; @params
    29                              <1>     ;   AX = 1130
    30                              <1>     ;   BH = フォントタイプ
    31                              <1>     ;       0x00 8x8
    32                              <1>     ;       0x02 8x14
    33                              <1>     ;       0x03 8x8
    34                              <1>     ;       0x05 9x14
    35                              <1>     ;       0x06 8x16
    36                              <1>     ;       0x07 9x16
    37                              <1>     ; @returns
    38                              <1>     ;   CF: 成功？
    39                              <1>     ;   ES:BP フォントアドレス
    40                              <1>     ;   CX スキャンライン
    41                              <1>     ;   DL 文字の高さ(ドット単位)
    42                              <1> 
    43 000002D0 B83011              <1>     mov ax, 0x1130 ; フォントアドレスの取得
    44 000002D3 B706                <1>     mov bh, 0x06 ; 8x16 font
    45 000002D5 CD10                <1>     int 10h
    46                              <1> 
    47 000002D7 8C04                <1>     mov [si + 0], es
    48 000002D9 896C02              <1>     mov [si + 2], bp
    49                              <1> 
    50                              <1>     ; レジスタの復帰
    51 000002DC 5D                  <1>     pop bp
    52 000002DD 07                  <1>     pop es
    53 000002DE 5E                  <1>     pop si
    54 000002DF 5B                  <1>     pop bx
    55 000002E0 58                  <1>     pop ax
    56                              <1> 
    57                              <1>     ; スタックフレームの破棄
    58 000002E1 89EC                <1>     mov sp, bp
    59 000002E3 5D                  <1>     pop bp
    60                              <1> 
    61 000002E4 C3                  <1>     ret
   100                                  
   101                                  ; ****************************
   102                                  ; ブート処理の第2ステージ
   103                                  ; ****************************
   104                                  stage_2:
   105                                  
   106                                      ; 文字列を表示
   107 000002E5 68[5F03]E8D7FD83C4-         cdecl puts, .s0
   107 000002ED 02                 
   108                                  
   109                                      ; ドライブ情報を取得
   110 000002EE 68[BA00]E890FF83C4-         cdecl get_drive_param, BOOT + drive
   110 000002F6 02                 
   111 000002F7 83F800                      cmp ax, 0
   112                                  .10Q:
   113 000002FA 750C                        jne .10E
   114                                  .10T:
   115 000002FC 68[9503]E8C0FD83C4-         cdecl puts, .e0
   115 00000304 02                 
   116 00000305 E8D9FD                      call reboot
   117                                  .10E:
   118                                      ; ドライブ情報の表示
   119 00000308 A1[BA00]                    mov ax, [BOOT + drive.no]
   120 0000030B 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100
   120 00000312 [7703]50E8ECFE83C4-
   120 0000031A 0A                 
   121 0000031B A1[BC00]                    mov ax, [BOOT + drive.cyln]
   122 0000031E 6A046A106A0268-             cdecl itoa, ax, .p2, 2, 16, 0b0100
   122 00000325 [7F03]50E8D9FE83C4-
   122 0000032D 0A                 
   123 0000032E A1[BE00]                    mov ax, [BOOT + drive.head]
   124 00000331 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100
   124 00000338 [8803]50E8C6FE83C4-
   124 00000340 0A                 
   125 00000341 A1[C000]                    mov ax, [BOOT + drive.sect]
   126 00000344 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100
   126 0000034B [9003]50E8B3FE83C4-
   126 00000353 0A                 
   127 00000354 68[6E03]E868FD83C4-         cdecl puts, .s1
   127 0000035C 02                 
   128                                  
   129                                  
   130 0000035D EB51                        jmp stage_3rd
   131                                  
   132                                  .s0:
   133 0000035F 326E64207374616765-         db "2nd stage...", 0x0A, 0x0D, 0
   133 00000368 2E2E2E0A0D00       
   134                                  .s1:
   135 0000036E 2044726976653A3078          db " Drive:0x"
   136                                  .p1:
   137 00000377 20202C20433A3078            db "  , C:0x"
   138                                  .p2:
   139 0000037F 2020202C20483A3078          db "   , H:0x"
   140                                  .p3:
   141 00000388 20202C20533A3078            db "  , S:0x"
   142                                  .p4:
   143 00000390 20200A0D00                  db "  ", 0x0A, 0x0D, 0
   144                                  
   145                                  .e0:
   146 00000395 43616E277420676574-         db "Can't get drive parameter.", 0
   146 0000039E 206472697665207061-
   146 000003A7 72616D657465722E00 
   147                                  
   148                                  ; ****************************
   149                                  ; ブート処理の第3ステージ
   150                                  ; ****************************
   151                                  stage_3rd:
   152 000003B0 68[F303]E80CFD83C4-         cdecl puts, .s0
   152 000003B8 02                 
   153                                  
   154 000003B9 68[0002]E806FF83C4-         cdecl get_font_adr, FONT
   154 000003C1 02                 
   155                                  
   156                                      ; フォントアドレスの表示
   157 000003C2 6A046A106A0468-             cdecl itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   157 000003C9 [1004]FF36[0002]E8-
   157 000003D0 32FE83C40A         
   158 000003D5 6A046A106A0468-             cdecl itoa, word [FONT.off], .p2, 4, 16, 0b0100
   158 000003DC [1504]FF36[0202]E8-
   158 000003E3 1FFE83C40A         
   159 000003E8 68[0204]E8D4FC83C4-         cdecl puts, .s1
   159 000003F0 02                 
   160                                  
   161 000003F1 EBFE                        jmp $
   162                                  
   163                                  .s0:
   164 000003F3 337264207374616765-         db "3rd stage...", 0x0A, 0x0D, 0
   164 000003FC 2E2E2E0A0D00       
   165                                  
   166                                  .s1:
   167 00000402 20466F6E7420416464-         db " Font Address="
   167 0000040B 726573733D         
   168                                  .p1:
   169 00000410 5A5A5A5A3A                  db "ZZZZ:"
   170                                  .p2:
   171 00000415 5A5A5A5A0A0D00              db "ZZZZ", 0x0A, 0x0D, 0
   172                                  
   173                                  ; ****************************
   174                                  ; padding (このファイルは8kバイトとする)
   175                                  ; ****************************
   176 0000041C 00<rept>                    times BOOT_SIZE - ($ - $$) db 0
