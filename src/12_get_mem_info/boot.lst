     1                                  ; ****************************
     2                                  ; マクロ
     3                                  ; ****************************
     4                                  %include "../include/define.s"
     1                              <1> BOOT_LOAD equ 0x7c00 ; ブートプログラムのロード位置
     2                              <1> 
     3                              <1> BOOT_SIZE equ (1024 * 8) ; ブートプログラムのサイズ
     4                              <1> SECT_SIZE equ (512) ; セクタサイズ
     5                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     6                              <1> 
     7                              <1> E820_RECORD_SIZE equ 20
     5                                  %include "../include/macro.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1>     .no     resw 1 ; ドライブ番号
     3 00000002 <res 00000002>      <1>     .cyln   resw 1 ; シリンダ
     4 00000004 <res 00000002>      <1>     .head   resw 1 ; ヘッド
     5 00000006 <res 00000002>      <1>     .sect   resw 1 ; セクタ
     6                              <1> endstruc
     7                              <1> 
     8                              <1> %macro cdecl 1-*.nolist
     9                              <1>     
    10                              <1>     %rep %0 - 1
    11                              <1>         push %{-1:-1}
    12                              <1>         %rotate -1
    13                              <1>     %endrep
    14                              <1> 
    15                              <1>     %rotate -1
    16                              <1>         call %1
    17                              <1>     
    18                              <1>     %if 1 < %0
    19                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1>     %endif
    21                              <1> 
    22                              <1> %endmacro
     6                                  
     7                                  org BOOT_LOAD
     8                                  
     9                                  ; ****************************
    10                                  ; エントリーポイント
    11                                  ; ****************************
    12                                  entry:
    13 00000000 EB58                        jmp ipl
    14                                  
    15                                      ; ---------
    16                                      ; BPB (BIOS Parameter Block)
    17                                      ; ---------
    18 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    19                                  
    20                                      ; ---------
    21                                      ; IPL(Initial Program Loader)
    22                                      ; --------- 
    23                                  
    24                                  ipl:
    25                                      ; BIOSが利用した時の値がそのまま残っているので、セグメントやスタックの値を設定しなおす
    26 0000005A FA                          cli ; セグメントの初期化や割り込みの設定時に割り込みが呼ばれてほしくないので、いったん止める
    27                                  
    28 0000005B B80000                      mov ax, 0x0000
    29 0000005E 8ED8                        mov ds, ax
    30 00000060 8EC0                        mov es, ax
    31 00000062 8ED0                        mov ss, ax
    32 00000064 BC007C                      mov sp, BOOT_LOAD ; スタックはブートローダーが読み込まれた場所から上に伸びていく
    33                                  
    34 00000067 FB                          sti ; 割り込みのうけつけを再開する
    35                                  
    36 00000068 8816[BA00]                  mov [BOOT + drive.no], dl ; ドライブ番号の保存
    37                                  
    38                                      ; 文字列を表示
    39 0000006C 68[9900]E8500083C4-         cdecl puts, .s0
    39 00000074 02                 
    40                                  
    41                                      ; ハードディスクから、512~を読み出す
    42 00000075 BB0F00                      mov bx, BOOT_SECT - 1 ; 残りのブートセクタ数
    43 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE ; 次にロードされるべきアドレス
    44                                  
    45 0000007B 515368[BA00]E89E00-         cdecl read_chs, BOOT + drive, bx, cx
    45 00000083 83C406             
    46                                  
    47 00000086 39D8                        cmp ax, bx
    48                                  .10Q:
    49 00000088 740C                        jz .10E ; 指定したサイズだけ読み出しができていればよし
    50                                  .10T:
    51                                      ; そうでなかったら再起動
    52 0000008A 68[A600]E8320083C4-         cdecl puts, .e0
    52 00000092 02                 
    53 00000093 E84B00                      call reboot
    54                                  .10E:
    55 00000096 E90905                      jmp stage_2
    56                                  
    57 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0 ; 0x0A = LF, 0x0D = CR
    57 000000A2 2E0A0D00           
    58 000000A6 4572726F723A207365-     .e0 db "Error: sector read", 0
    58 000000AF 63746F722072656164-
    58 000000B8 00                 
    59                                  
    60                                  
    61 000000B9 00                      ALIGN 2, db 0
    62                                  BOOT: ; ブートドライブに関する情報
    63                                      istruc drive
    64 000000BA 0000                            at drive.no,    dw 0
    65 000000BC 0000                            at drive.cyln,  dw 0
    66 000000BE 0000                            at drive.head,  dw 0
    67 000000C0 0200                            at drive.sect,  dw 2
    68                                      iend
    69                                  
    70                                  
    71                                  ; ****************************
    72                                  ; 最初の512バイト内の処理で必要なモジュール
    73                                  ; ****************************
    74                                  %include "../modules/real/puts.s"
     1                              <1> ; puts
     2                              <1> ; 文字列を表示する
     3                              <1> ; @params address (2 bytes) 表示文字列へのアドレス
     4                              <1> ; @returns void
     5                              <1> ; @example
     6                              <1> ; cdecl puts, .s0
     7                              <1> 
     8                              <1> puts:
     9                              <1>     ; スタックフレームの構築
    10 000000C2 55                  <1>     push bp
    11 000000C3 89E5                <1>     mov bp, sp
    12                              <1> 
    13                              <1>     ; + 4 | 文字列へのアドレス
    14                              <1>     ; + 2 | IP
    15                              <1>     ; + 0 | BP
    16                              <1>     
    17                              <1>     ; レジスタの保存
    18 000000C5 50                  <1>     push ax
    19 000000C6 53                  <1>     push bx
    20 000000C7 56                  <1>     push si
    21                              <1> 
    22                              <1>     ; save arguments
    23 000000C8 8B7604              <1>     mov si, [bp + 4]
    24                              <1> 
    25 000000CB B40E                <1>     mov ah, 0x0e   ; テレタイプ式1文字出力
    26 000000CD BB0000              <1>     mov bx, 0x0000 ; ページ番号と文字色を0に設定
    27 000000D0 FC                  <1>     cld ; DF = 0
    28                              <1> 
    29                              <1> .10L:
    30 000000D1 AC                  <1>     lodsb ; al = *si++;
    31                              <1> 
    32 000000D2 3C00                <1>     cmp al, 0
    33 000000D4 7404                <1>     je .10E
    34                              <1> 
    35 000000D6 CD10                <1>     int 0x10
    36 000000D8 EBF7                <1>     jmp .10L
    37                              <1> 
    38                              <1> .10E:
    39                              <1> 
    40                              <1>     ; restore registers
    41 000000DA 5E                  <1>     pop si
    42 000000DB 5B                  <1>     pop bx
    43 000000DC 58                  <1>     pop ax
    44                              <1> 
    45                              <1>     ; discard stack frame
    46                              <1> 
    47 000000DD 89EC                <1>     mov sp, bp
    48 000000DF 5D                  <1>     pop bp
    49                              <1> 
    50 000000E0 C3                  <1>     ret
    75                                  %include "../modules/real/reboot.s"
     1                              <1> ; reboot
     2                              <1> ; 再起動する
     3                              <1> ; @params
     4                              <1> ; @returns
     5                              <1> ; @example
     6                              <1> ;   cdecl reboot
     7                              <1> 
     8                              <1> reboot:
     9                              <1>     ; メッセージを表示
    10 000000E1 68[FD00]E8DBFF83C4- <1>     cdecl puts, .s0
    10 000000E9 02                  <1>
    11                              <1> 
    12                              <1>     ; キー入力を待つ
    13                              <1> .10L:
    14 000000EA B410                <1>     mov ah, 0x10 ; Read expanded keyboard character https://en.wikipedia.org/wiki/INT_16H
    15 000000EC CD16                <1>     int 0x16 ; キー入力を待つ
    16                              <1> 
    17 000000EE 3C20                <1>     cmp al, ' '
    18 000000F0 75F8                <1>     jne .10L
    19                              <1> 
    20                              <1>     ; 改行を出力
    21 000000F2 68[1C01]E8CAFF83C4- <1>     cdecl puts, .s1
    21 000000FA 02                  <1>
    22                              <1> 
    23                              <1>     ; 再起動
    24 000000FB CD19                <1>     int 0x19
    25                              <1> 
    26 000000FD 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot....", 0
    26 00000106 414345206B65792074- <1>
    26 0000010F 6F207265626F6F742E- <1>
    26 00000118 2E2E2E00            <1>
    27 0000011C 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    76                                  %include "../modules/real/read_chs.s"
     1                              <1> ; read_chs
     2                              <1> ; ディスクから指定したアドレスにデータを移動させる
     3                              <1> ; @params
     4                              <1> ;   drive: drive構造体のアドレス
     5                              <1> ;   sect: 読み出しセクタ数
     6                              <1> ;   dst: 読み出し先アドレス
     7                              <1> ; @returns
     8                              <1> ;   ax: 読み出したセクタ数
     9                              <1> ; @example
    10                              <1> ;   cdecl read_chs, read_chs, BOOT + drive, BOOT_SECT - 1, BOOT_LOAD + SECT_SIZE
    11                              <1> 
    12                              <1> read_chs:
    13                              <1>     ; スタックフレームの構築
    14                              <1> 
    15 00000121 55                  <1>     push bp
    16 00000122 89E5                <1>     mov bp, sp
    17 00000124 6A03                <1>     push 3 ; リトライ回数
    18 00000126 6A00                <1>     push 0 ; 読み込みセクタ数
    19                              <1> 
    20                              <1>     ;+ 8 | 読み出し先アドレス
    21                              <1>     ;+ 6 | 読み出しセクタ数
    22                              <1>     ;+ 4 | drive構造体のアドレス
    23                              <1>     ;+ 2 | IP
    24                              <1>     ;+ 0 | BP
    25                              <1>     ;- 2 | リトライ回数
    26                              <1>     ;- 4 | 読み込みセクタ数
    27                              <1> 
    28                              <1>     ; レジスタの保存
    29 00000128 53                  <1>     push bx
    30 00000129 51                  <1>     push cx
    31 0000012A 52                  <1>     push dx
    32 0000012B 06                  <1>     push es
    33 0000012C 56                  <1>     push si
    34                              <1> 
    35                              <1>     ; 処理の開始
    36 0000012D 8B7604              <1>     mov si, [bp + 4] ;si = ドライブ構造体のアドレス
    37                              <1> 
    38 00000130 8A6C02              <1>     mov ch, [si + drive.cyln + 0] ; シリンダ番号の下位バイト
    39 00000133 8A4C03              <1>     mov cl, [si + drive.cyln + 1] ; シリンダ番号の上位バイト
    40 00000136 C0E106              <1>     shl cl, 6
    41 00000139 0A4C06              <1>     or cl, [si + drive.sect]
    42                              <1> 
    43                              <1>     ; セクタ読み込み
    44 0000013C 8A7404              <1>     mov dh, [si + drive.head]
    45 0000013F 8A14                <1>     mov dl, [si + drive.no]
    46 00000141 B80000              <1>     mov ax, 0x0000
    47 00000144 8EC0                <1>     mov es, ax
    48 00000146 8B5E08              <1>     mov bx, [bp + 8] ; es(0x0000):bx(読み込み先アドレス)に読み込み
    49                              <1> 
    50                              <1> .10L:
    51 00000149 B402                <1>     mov ah, 0x02
    52 0000014B 8A4606              <1>     mov al, [bp + 6]
    53                              <1> 
    54 0000014E CD13                <1>     int 0x13
    55 00000150 7304                <1>     jnc .11E ; if failed: al = 0 && break
    56                              <1> 
    57 00000152 B000                <1>     mov al, 0
    58 00000154 EB0C                <1>     jmp .10E
    59                              <1> 
    60                              <1> .11E:
    61 00000156 3C00                <1>     cmp al, 0 ; if 読み出したセクタ数 == 0
    62 00000158 7508                <1>     jne .10E
    63                              <1> 
    64 0000015A B80000              <1>     mov ax, 0
    65 0000015D FF4EFE              <1>     dec word [bp - 2]
    66 00000160 75E7                <1>     jnz .10L ; リトライ回数だけリトライ
    67                              <1> 
    68                              <1> .10E:
    69 00000162 B400                <1>     mov ah, 0 ; ステータスは破棄
    70                              <1> 
    71                              <1>     ; レジスタの復帰
    72 00000164 5E                  <1>     pop si
    73 00000165 07                  <1>     pop es
    74 00000166 5A                  <1>     pop dx
    75 00000167 59                  <1>     pop cx
    76 00000168 5B                  <1>     pop bx
    77                              <1> 
    78                              <1>     ; スタックフレームの破棄
    79 00000169 89EC                <1>     mov sp, bp
    80 0000016B 5D                  <1>     pop bp
    81                              <1> 
    82 0000016C C3                  <1>     ret
    77                                  
    78                                  ; ****************************
    79                                  ; ブートフラグ
    80                                  ; ****************************
    81 0000016D 00<rept>                    times 510 - ($ - $$) db 0x00
    82 000001FE 55AA                        db 0x55, 0xaa
    83                                  
    84                                  ; ****************************
    85                                  ; リアルモード時に取得した情報
    86                                  ; ****************************
    87                                  FONT:
    88                                  .seg:
    89 00000200 0000                        dw 0
    90                                  .off:
    91 00000202 0000                        dw 0
    92                                  ACPI_DATA:
    93                                  .adr:
    94 00000204 00000000                    dd 0
    95                                  .len:
    96 00000208 00000000                    dd 0
    97                                  
    98                                  
    99                                  ; ****************************
   100                                  ; 512バイト以降の処理で必要なモジュール
   101                                  ; ****************************
   102                                  %include "../modules/real/itoa.s"
     1                              <1> ; itoa
     2                              <1> ; 数値を文字列に変換する
     3                              <1> ; @params
     4                              <1> ;   num: 変換する値
     5                              <1> ;   buff: 保存先アドレス
     6                              <1> ;   size: 保存先バッファサイズ
     7                              <1> ;   radix: 基数(2 or 8 or 10 or 16)
     8                              <1> ;   flags: ビット定義のフラグ
     9                              <1> ;       B2: 空白を0で埋める
    10                              <1> ;       B1: '+/-'記号を付加する
    11                              <1> ;       B0: 値を符号付き変数として扱う
    12                              <1> ; @example
    13                              <1> ;   cdecl, itoa, 8086, .s1, 8, 10, 0b0001 ; "    8086"
    14                              <1> 
    15                              <1> itoa:
    16                              <1>     ; stack frame
    17 0000020C 55                  <1>     push bp
    18 0000020D 89E5                <1>     mov bp, sp
    19                              <1> 
    20                              <1>     ; + 12 | flags
    21                              <1>     ; + 10 | 基数
    22                              <1>     ; +  8 | 保存先バッファサイズ
    23                              <1>     ; +  6 | 保存先アドレス
    24                              <1>     ; +  4 | 変換する値
    25                              <1>     ; +  2 | IP
    26                              <1>     ; +  0 | BP
    27                              <1> 
    28                              <1>     ; save registers
    29 0000020F 50                  <1>     push ax
    30 00000210 53                  <1>     push bx
    31 00000211 51                  <1>     push cx
    32 00000212 52                  <1>     push dx
    33 00000213 56                  <1>     push si
    34 00000214 57                  <1>     push di
    35                              <1> 
    36                              <1>     ; 引数を取得
    37 00000215 8B4604              <1>     mov ax, [bp + 4]
    38 00000218 8B7606              <1>     mov si, [bp + 6]
    39 0000021B 8B4E08              <1>     mov cx, [bp + 8]
    40                              <1> 
    41 0000021E 89F7                <1>     mov di, si
    42 00000220 01CF                <1>     add di, cx ; dst = &dst[size - 1]
    43 00000222 4F                  <1>     dec di
    44                              <1> 
    45 00000223 8B5E0C              <1>     mov bx, word [bp + 12] ; flags = オプション
    46                              <1> 
    47                              <1>     ; 符号付き数値として扱うかを判定する
    48                              <1>     ; もし負の数だったらB1をtrueにする
    49 00000226 F7C30100            <1>     test bx, 0b0001
    50                              <1> .10Q:
    51 0000022A 7408                <1>     je .10E ; ZF = 0(先のtest演算の結果が0になっていたら、つまり、オプションが無効であればスキップ)
    52 0000022C 83F800              <1>     cmp ax, 0 ; if num < 0
    53 0000022F 7D03                <1>     jge .12E
    54 00000231 83CB02              <1>     or bx, 0b0010 ; flags |= 2
    55                              <1> .12E:
    56                              <1> .10E:
    57                              <1> 
    58                              <1>     ; 符号を出力するか判定する
    59 00000234 F7C30200            <1>     test bx, 0b0010
    60                              <1> .20Q:
    61 00000238 7410                <1>     je .20E
    62 0000023A 83F800              <1>     cmp ax, 0 ; if num < 0
    63                              <1> .22Q:
    64 0000023D 7D07                <1>     jge .22F
    65 0000023F F7D8                <1>     neg ax ; num *= -1
    66 00000241 C6042D              <1>     mov [si], byte '-' ; 符号を表示する
    67 00000244 EB03                <1>     jmp .22E
    68                              <1> .22F:
    69 00000246 C6042B              <1>     mov [si], byte '+'    
    70                              <1> .22E:
    71 00000249 49                  <1>     dec cx ; size--
    72                              <1> .20E:
    73                              <1> 
    74                              <1> 
    75                              <1>     ; ASCII変換
    76 0000024A 8B5E0A              <1>     mov bx, [bp + 10] ; 基数
    77                              <1> .30L:
    78 0000024D BA0000              <1>     mov dx, 0
    79                              <1>     ; div
    80                              <1>     ; AX = DX:AX / 基数
    81                              <1>     ; DX = DX:AX % 基数
    82 00000250 F7F3                <1>     div bx
    83                              <1> 
    84 00000252 89D6                <1>     mov si, dx ; si = 余り
    85 00000254 8A94[7C02]          <1>     mov dl, byte [.ascii + si] ; 変換テーブルから、余り(数値)を文字に変換
    86                              <1> 
    87 00000258 8815                <1>     mov [di], dl
    88 0000025A 4F                  <1>     dec di
    89                              <1> 
    90 0000025B 83F800              <1>     cmp ax, 0
    91 0000025E E0ED                <1>     loopnz .30L ; ax != 0なら.30Lに戻る
    92                              <1> .30E:
    93                              <1> 
    94                              <1> 
    95                              <1>     ; 空欄を埋める
    96 00000260 83F900              <1>     cmp cx, 0
    97                              <1> .40Q:
    98 00000263 740D                <1>     je .40E
    99 00000265 B020                <1>     mov al, ' '
   100 00000267 837E0C04            <1>     cmp [bp + 12], word 0b0100
   101 0000026B 7502                <1>     jne .42E
   102 0000026D B030                <1>     mov al, '0'
   103                              <1> .42E:
   104 0000026F FD                  <1>     std ; DF = 1 (マイナス方向に伸ばしていく)
   105 00000270 F3AA                <1>     rep stosb ; while (cx > 0) { [di] = al; di--; cx--; }
   106                              <1> .40E:
   107                              <1> 
   108                              <1>     ; レジスタの復元
   109 00000272 5F                  <1>     pop di
   110 00000273 5E                  <1>     pop si
   111 00000274 5A                  <1>     pop dx
   112 00000275 59                  <1>     pop cx
   113 00000276 5B                  <1>     pop bx
   114 00000277 58                  <1>     pop ax
   115                              <1> 
   116                              <1>     ; スタックフレームの破棄
   117 00000278 89EC                <1>     mov sp, bp
   118 0000027A 5D                  <1>     pop bp
   119                              <1> 
   120 0000027B C3                  <1>     ret
   121                              <1> 
   122 0000027C 303132333435363738- <1> .ascii db "0123456789ABCDEF"
   122 00000285 39414243444546      <1>
   103                                  %include "../modules/real/get_drive_param.s"
     1                              <1> ; get_drive_param
     2                              <1> ; ドライブの情報を取得して、drive構造体のアドレスに置く
     3                              <1> ; @params
     4                              <1> ;   drive: drive構造体のアドレス. noを事前にセットしておく
     5                              <1> ; @return
     6                              <1> ;    ax : セクタ数
     7                              <1> ; @example
     8                              <1> ;   cdecl get_drive_param BOOT + drive
     9                              <1> 
    10                              <1> get_drive_param:
    11                              <1>     ; スタックフレーム構築
    12 0000028C 55                  <1>     push bp
    13 0000028D 89E5                <1>     mov bp, sp
    14                              <1> 
    15                              <1>     ; + 4 | drive構造体のアドレス
    16                              <1>     ; + 2 | IP
    17                              <1>     ; + 0 | BP
    18                              <1> 
    19                              <1>     ; レジスタの保存
    20 0000028F 53                  <1>     push bx
    21 00000290 51                  <1>     push cx
    22 00000291 06                  <1>     push es
    23 00000292 56                  <1>     push si
    24 00000293 57                  <1>     push di
    25                              <1> 
    26                              <1>     ; INT 0x13(AH = 8)を呼び出す
    27                              <1>     ; @params DL = ドライブ番号
    28                              <1>     ; @returns 実際にアクセス可能な最終地点が帰ってくる
    29                              <1>     ;   CF : 失敗
    30                              <1>     ;   AH : リターンコード
    31                              <1>     ;   BL : FDDタイプ(1 = 360K, 2 = 1.2M, 3 = 720K, 4 = 1.44M)
    32                              <1>     ;   CL[7:6] : シリンダ(上位2bit)
    33                              <1>     ;   CH : シリンダ(下位8bit)
    34                              <1>     ;   CL[5:0] : セクタ
    35                              <1>     ;   DH : ヘッド
    36                              <1>     ;   DL : ドライブ
    37                              <1>     ;   ES:DI : ディスクベーステーブルのアドレス(詳細な情報が格納される)
    38                              <1> 
    39                              <1>     ; 処理の開始
    40 00000294 8B7604              <1>     mov si, [bp + 4]
    41 00000297 B80000              <1>     mov ax, 0
    42 0000029A 8EC0                <1>     mov es, ax
    43 0000029C 89C7                <1>     mov di, ax
    44                              <1> 
    45 0000029E B408                <1>     mov ah, 8
    46 000002A0 8A14                <1>     mov dl, [si + drive.no]
    47 000002A2 CD13                <1>     int 0x13
    48                              <1> 
    49                              <1> .10Q:
    50 000002A4 721B                <1>     jc .10F
    51                              <1> .10T:
    52 000002A6 88C8                <1>     mov al, cl
    53 000002A8 83E03F              <1>     and ax, 0x3F ; 実際にアクセス可能な最終セクタが帰ってくる。セクタは1から番号がはじまるので
    54                              <1>                  ; 最終地点の番号がそのままセクタ数
    55                              <1> 
    56 000002AB C0E906              <1>     shr cl, 6 ; シリンダ数の上位2ビット
    57 000002AE C1C908              <1>     ror cx, 8 ; axレジスタのビットを右に8ビット回転させる <=> CH[1:0]CL = シリンダ数
    58 000002B1 41                  <1>     inc cx ; 実際にアクセス可能な最終シリンダが帰ってくるので、＋１でシリンダ数になる
    59                              <1> 
    60 000002B2 0FB6DE              <1>     movzx bx, dh ; ヘッド数
    61 000002B5 43                  <1>     inc bx ; 実際にアクセス可能な最終ヘッダ番号が帰ってくるので＋１でヘッダ数になる
    62                              <1> 
    63 000002B6 894C02              <1>     mov [si + drive.cyln], cx
    64 000002B9 895C04              <1>     mov [si + drive.head], bx
    65 000002BC 894406              <1>     mov [si + drive.sect], ax
    66                              <1> 
    67 000002BF EB03                <1>     jmp .10E
    68                              <1> 
    69                              <1> .10F:
    70 000002C1 B80000              <1>     mov ax, 0
    71                              <1> 
    72                              <1> .10E:
    73                              <1>     ; レジスタの復帰
    74 000002C4 5F                  <1>     pop di
    75 000002C5 5E                  <1>     pop si
    76 000002C6 07                  <1>     pop es
    77 000002C7 59                  <1>     pop cx
    78 000002C8 5B                  <1>     pop bx
    79                              <1> 
    80                              <1>     ; スタックフレームの破棄
    81 000002C9 89EC                <1>     mov sp, bp
    82 000002CB 5D                  <1>     pop bp
    83                              <1> 
    84 000002CC C3                  <1>     ret
   104                                  %include "../modules/real/get_font_adr.s"
     1                              <1> ; get_font_adr
     2                              <1> ; BIOSのフォントが置かれているアドレスを取得する
     3                              <1> ; @params
     4                              <1> ;   adr: フォントアドレス格納位置
     5                              <1> ; @returns
     6                              <1> ; @example
     7                              <1> ;   cdecl get_font_adr, FONT_ADDRESS
     8                              <1> 
     9                              <1> get_font_adr:
    10                              <1>     ; スタックフレームの構築
    11 000002CD 55                  <1>     push bp
    12 000002CE 89E5                <1>     mov bp, sp
    13                              <1> 
    14                              <1>     ; + 4 | フォントアドレス格納位置
    15                              <1>     ; + 2 | IP
    16                              <1>     ; + 0 | BP
    17                              <1> 
    18                              <1>     ; レジスタの保存
    19 000002D0 50                  <1>     push ax
    20 000002D1 53                  <1>     push bx
    21 000002D2 56                  <1>     push si
    22 000002D3 06                  <1>     push es
    23 000002D4 55                  <1>     push bp
    24                              <1> 
    25 000002D5 8B7604              <1>     mov si, [bp + 4]
    26                              <1> 
    27                              <1>     ; INT 0x10(AX = 0x1130)
    28                              <1>     ; @params
    29                              <1>     ;   AX = 1130
    30                              <1>     ;   BH = フォントタイプ
    31                              <1>     ;       0x00 8x8
    32                              <1>     ;       0x02 8x14
    33                              <1>     ;       0x03 8x8
    34                              <1>     ;       0x05 9x14
    35                              <1>     ;       0x06 8x16
    36                              <1>     ;       0x07 9x16
    37                              <1>     ; @returns
    38                              <1>     ;   CF: 成功？
    39                              <1>     ;   ES:BP フォントアドレス
    40                              <1>     ;   CX スキャンライン
    41                              <1>     ;   DL 文字の高さ(ドット単位)
    42                              <1> 
    43 000002D8 B83011              <1>     mov ax, 0x1130 ; フォントアドレスの取得
    44 000002DB B706                <1>     mov bh, 0x06 ; 8x16 font
    45 000002DD CD10                <1>     int 10h
    46                              <1> 
    47 000002DF 8C04                <1>     mov [si + 0], es
    48 000002E1 896C02              <1>     mov [si + 2], bp
    49                              <1> 
    50                              <1>     ; レジスタの復帰
    51 000002E4 5D                  <1>     pop bp
    52 000002E5 07                  <1>     pop es
    53 000002E6 5E                  <1>     pop si
    54 000002E7 5B                  <1>     pop bx
    55 000002E8 58                  <1>     pop ax
    56                              <1> 
    57                              <1>     ; スタックフレームの破棄
    58 000002E9 89EC                <1>     mov sp, bp
    59 000002EB 5D                  <1>     pop bp
    60                              <1> 
    61 000002EC C3                  <1>     ret
   105                                  %include "../modules/real/get_mem_info.s"
     1                              <1> ; get_mem_info
     2                              <1> ; メモリー情報を取得する
     3                              <1> ; @params
     4                              <1> ; @returns
     5                              <1> ; @examples
     6                              <1> ;   call get_mem_info
     7                              <1> 
     8                              <1> get_mem_info:
     9                              <1> 
    10                              <1>     ; レジスタの保存
    11 000002ED 6650                <1>     push eax
    12 000002EF 6653                <1>     push ebx
    13 000002F1 6651                <1>     push ecx
    14 000002F3 6652                <1>     push edx
    15 000002F5 56                  <1>     push si
    16 000002F6 57                  <1>     push di
    17 000002F7 55                  <1>     push bp
    18                              <1> 
    19 000002F8 68[8C03]E8C4FD83C4- <1>     cdecl puts, .s0
    19 00000300 02                  <1>
    20                              <1> 
    21 00000301 BD0000              <1>     mov bp, 0 ; lines = 0
    22 00000304 66BB00000000        <1>     mov ebx, 0 ; index = 0
    23                              <1> 
    24                              <1> .10L:
    25                              <1>     
    26                              <1>     ; INT 0x15 (AX = 0xE820)
    27                              <1>     ; 0x0010_0000 より上位にあるメモリ領域の情報を取得する
    28                              <1>     ; @params
    29                              <1>     ;   AX = 0xE820
    30                              <1>     ;   EBX = インデックス(初回は0)
    31                              <1>     ;   ES:DI = 情報書込み先 (ベースアドレス8バイト、長さ8バイト、タイプ4バイト)
    32                              <1>     ;       タイプ
    33                              <1>     ;           1. AddressRangeMemory 使用可能
    34                              <1>     ;           2. AddressRangeReserved 使用不可
    35                              <1>     ;           3. AddressRangeACPI ACPIテーブル参照可能
    36                              <1>     ;           4. AddressRangeNVS 使用不可
    37                              <1>     ;   ECX = 書込み先バイト数(20 bytes)
    38                              <1>     ;   EDX = 0x534D4150
    39                              <1>     ; @returns
    40                              <1>     ;   CF: 成功？
    41                              <1>     ;   EAX: 0x534D4150
    42                              <1>     ;   ECX: 書込みバイト数
    43                              <1>     ;   EBX: インデックス（0の時は最終データ）
    44                              <1> 
    45 0000030A 66B820E80000        <1>     mov eax, 0x0000E820
    46 00000310 66B914000000        <1>     mov ecx, E820_RECORD_SIZE
    47 00000316 66BA50414D53        <1>     mov edx, 'PAMS'
    48 0000031C BF[2404]            <1>     mov di, .b0
    49 0000031F CD15                <1>     int 0x15
    50                              <1> 
    51 00000321 663D50414D53        <1>     cmp eax, 'PAMS'
    52 00000327 7402                <1>     je .12E ; メモリ取得コマンドに対応している
    53 00000329 EB4C                <1>     jmp .10E ; 対応していないときは関数を終了
    54                              <1> 
    55                              <1> .12E:
    56                              <1>     ; メモリ取得コマンドに対応している時の処理
    57 0000032B 7302                <1>     jnc .14E ; コマンド実行に失敗していなければ14Eに飛ぶ
    58 0000032D EB48                <1>     jmp .10E ; コマンドの実行に終了したので関数を終了
    59                              <1> 
    60                              <1> .14E:
    61 0000032F 57E8050183C402      <1>     cdecl put_mem_info, di ; 1レコードぶんのメモリ情報を表示
    62                              <1> 
    63 00000336 668B4510            <1>     mov eax, [di + 16] ; タイプを取得
    64 0000033A 6683F803            <1>     cmp eax, 3
    65 0000033E 750F                <1>     jne .15E
    66                              <1>     ; EAX = 3だったら
    67 00000340 668B05              <1>     mov eax, [di + 0] ; eax = ベースアドレス
    68 00000343 66A3[0402]          <1>     mov [ACPI_DATA.adr], eax
    69                              <1>     
    70 00000347 668B4508            <1>     mov eax, [di + 8] ; eax = 長さ
    71 0000034B 66A3[0802]          <1>     mov [ACPI_DATA.len], eax
    72                              <1> 
    73                              <1> .15E:
    74                              <1> 
    75 0000034F 6683FB00            <1>     cmp ebx, 0
    76 00000353 741C                <1>     jz .16E
    77                              <1> 
    78 00000355 45                  <1>     inc bp ; lines++
    79 00000356 83E507              <1>     and bp, 0x07 ; lines &= 0x07
    80 00000359 7516                <1>     jnz .16E
    81                              <1>     ; 8行分表示したら
    82 0000035B 68[FF03]E861FD83C4- <1>     cdecl puts, .s2
    82 00000363 02                  <1>
    83 00000364 B410                <1>     mov ah, 0x10
    84 00000366 CD16                <1>     int 0x16
    85                              <1> 
    86                              <1>     ; 中断メッセージを消去
    87 00000368 68[0A04]E854FD83C4- <1>     cdecl puts, .s3
    87 00000370 02                  <1>
    88                              <1> 
    89                              <1> .16E:
    90 00000371 6683FB00            <1>     cmp ebx, 0
    91 00000375 7593                <1>     jne .10L
    92                              <1> 
    93                              <1> .10E:
    94                              <1>     ; 関数終了
    95 00000377 68[CF03]E845FD83C4- <1>     cdecl puts, .s1
    95 0000037F 02                  <1>
    96                              <1> 
    97 00000380 5D                  <1>     pop bp
    98 00000381 5F                  <1>     pop di
    99 00000382 5E                  <1>     pop si
   100 00000383 665A                <1>     pop edx
   101 00000385 6659                <1>     pop ecx
   102 00000387 665B                <1>     pop ebx
   103 00000389 6658                <1>     pop eax
   104                              <1> 
   105 0000038B C3                  <1>     ret
   106                              <1> 
   107                              <1> .s0:
   108 0000038C 2045383230204D656D- <1>     db " E820 Memory Map:", 0x0A, 0x0D
   108 00000395 6F7279204D61703A0A- <1>
   108 0000039E 0D                  <1>
   109 0000039F 20426173655F5F5F5F- <1>     db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
   109 000003A8 5F5F5F5F5F5F5F5F5F- <1>
   109 000003B1 204C656E6774685F5F- <1>
   109 000003BA 5F5F5F5F5F5F5F5F5F- <1>
   109 000003C3 20547970655F5F5F5F- <1>
   109 000003CC 0A0D00              <1>
   110                              <1> .s1:
   111 000003CF 202D2D2D2D2D2D2D2D- <1>     db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
   111 000003D8 2D2D2D2D2D2D2D2D2D- <1>
   111 000003E1 202D2D2D2D2D2D2D2D- <1>
   111 000003EA 2D2D2D2D2D2D2D2D2D- <1>
   111 000003F3 202D2D2D2D2D2D2D2D- <1>
   111 000003FC 0A0D00              <1>
   112                              <1> .s2:
   113 000003FF 203C6D6F72652E2E2E- <1>     db " <more...>", 0
   113 00000408 3E00                <1>
   114                              <1> .s3:
   115 0000040A 0D2020202020202020- <1>     db 0x0D, "                    ", 0x0D, 0
   115 00000413 202020202020202020- <1>
   115 0000041C 2020200D00          <1>
   116                              <1> 
   117 00000421 00<rept>            <1> ALIGN 4, db 0
   118                              <1> .b0:
   119 00000424 00<rept>            <1>     times E820_RECORD_SIZE db 0
   120                              <1> 
   121                              <1> 
   122                              <1> ; put_mem_info
   123                              <1> ; @params
   124                              <1> ;   adr: メモリ情報を参照するアドレス
   125                              <1> ; @returns
   126                              <1> ; @example
   127                              <1> ;   cdecl put_mem_info, MEMORY_INFO_ADDR
   128                              <1> 
   129                              <1> put_mem_info:
   130                              <1>     ; スタックフレームの構築
   131 00000438 55                  <1>     push bp
   132 00000439 89E5                <1>     mov bp, sp
   133                              <1> 
   134                              <1>     ; + 4 | メモリ情報を参照するアドレス
   135                              <1>     ; + 2 | IP
   136                              <1>     ; + 0 | BP
   137                              <1> 
   138                              <1>     ; レジスタの保存
   139 0000043B 53                  <1>     push bx
   140 0000043C 56                  <1>     push si
   141                              <1> 
   142 0000043D 8B7604              <1>     mov si, [bp + 4]
   143                              <1> 
   144                              <1>     ; Base(8 bytes)
   145 00000440 6A046A106A0468-     <1>     cdecl itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100 ; itoa は2バイトずつしか変換できない
   145 00000447 [1705]FF7406E8BDFD- <1>
   145 0000044F 83C40A              <1>
   146 00000452 6A046A106A0468-     <1>     cdecl itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
   146 00000459 [1B05]FF7404E8ABFD- <1>
   146 00000461 83C40A              <1>
   147 00000464 6A046A106A0468-     <1>     cdecl itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
   147 0000046B [2005]FF7402E899FD- <1>
   147 00000473 83C40A              <1>
   148 00000476 6A046A106A0468-     <1>     cdecl itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
   148 0000047D [2405]FF34E888FD83- <1>
   148 00000485 C40A                <1>
   149                              <1> 
   150                              <1>     ; Length(8 bytes)
   151 00000487 6A046A106A0468-     <1>     cdecl itoa, word [si + 14], .p4 + 0, 4, 16, 0b0100
   151 0000048E [2905]FF740EE876FD- <1>
   151 00000496 83C40A              <1>
   152 00000499 6A046A106A0468-     <1>     cdecl itoa, word [si + 12], .p4 + 4, 4, 16, 0b0100
   152 000004A0 [2D05]FF740CE864FD- <1>
   152 000004A8 83C40A              <1>
   153 000004AB 6A046A106A0468-     <1>     cdecl itoa, word [si + 10], .p5 + 0, 4, 16, 0b0100
   153 000004B2 [3205]FF740AE852FD- <1>
   153 000004BA 83C40A              <1>
   154 000004BD 6A046A106A0468-     <1>     cdecl itoa, word [si +  8], .p5 + 4, 4, 16, 0b0100    
   154 000004C4 [3605]FF7408E840FD- <1>
   154 000004CC 83C40A              <1>
   155                              <1> 
   156                              <1>     ; Type(4 bytes)
   157 000004CF 6A046A106A0468-     <1>     cdecl itoa, word [si + 18], .p6 + 0, 4, 16, 0b0100
   157 000004D6 [3B05]FF7412E82EFD- <1>
   157 000004DE 83C40A              <1>
   158 000004E1 6A046A106A0468-     <1>     cdecl itoa, word [si + 16], .p6 + 4, 4, 16, 0b0100
   158 000004E8 [3F05]FF7410E81CFD- <1>
   158 000004F0 83C40A              <1>
   159                              <1> 
   160 000004F3 68[1605]E8C9FB83C4- <1>     cdecl puts, .s1
   160 000004FB 02                  <1>
   161                              <1> 
   162 000004FC 8B5C10              <1>     mov bx, [si + 16]
   163 000004FF 83E307              <1>     and bx, 0x07 ; BX = Type(0~5)
   164 00000502 D1E3                <1>     shl bx, 1 ; BX *= 2 ; .t0配列の該当タイプへのインデックスに変換
   165                              <1>     ; .t0は1要素2バイトなので2倍してやる
   166 00000504 81C3[9205]          <1>     add bx, .t0
   167 00000508 FF37E8B5FB83C402    <1>     cdecl puts, word [bx]
   168                              <1> 
   169                              <1>     ; レジスタの復元
   170 00000510 5E                  <1>     pop si
   171 00000511 5B                  <1>     pop bx
   172                              <1> 
   173                              <1>     ; スタックフレームの破棄
   174 00000512 89EC                <1>     mov sp, bp
   175 00000514 5D                  <1>     pop bp
   176 00000515 C3                  <1>     ret
   177                              <1>     
   178                              <1> .s1:
   179 00000516 20                  <1>     db " "
   180                              <1> .p2:
   181 00000517 5A5A5A5A5A5A5A5A5F  <1>     db "ZZZZZZZZ_"
   182                              <1> .p3:
   183 00000520 5A5A5A5A5A5A5A5A20  <1>     db "ZZZZZZZZ "
   184                              <1> .p4:
   185 00000529 5A5A5A5A5A5A5A5A5F  <1>     db "ZZZZZZZZ_"
   186                              <1> .p5:
   187 00000532 5A5A5A5A5A5A5A5A20  <1>     db "ZZZZZZZZ "
   188                              <1> .p6:
   189 0000053B 5A5A5A5A5A5A5A5A00  <1>     db "ZZZZZZZZ", 0
   190                              <1> 
   191 00000544 28556E6B6E6F776E29- <1> .s4: db "(Unknown)", 0x0A, 0x0D, 0
   191 0000054D 0A0D00              <1>
   192 00000550 28757361626C65290A- <1> .s5: db "(usable)", 0x0A, 0x0D, 0
   192 00000559 0D00                <1>
   193 0000055B 287265736572766564- <1> .s6: db "(reserved)", 0x0A, 0x0D, 0
   193 00000564 290A0D00            <1>
   194 00000568 284143504920646174- <1> .s7: db "(ACPI data)", 0x0A, 0x0D, 0
   194 00000571 61290A0D00          <1>
   195 00000576 2841435049204E5653- <1> .s8: db "(ACPI NVS)", 0x0A, 0x0D, 0
   195 0000057F 290A0D00            <1>
   196 00000583 28626164206D656D6F- <1> .s9: db "(bad memory)", 0x0A, 0x0D, 0
   196 0000058C 7279290A0D00        <1>
   197                              <1> 
   198 00000592 [4405][5005][5B05]- <1> .t0: dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   198 00000598 [6805][7605][8305]- <1>
   198 0000059E [4405][4405]        <1>
   106                                  
   107                                  ; ****************************
   108                                  ; ブート処理の第2ステージ
   109                                  ; ****************************
   110                                  stage_2:
   111                                  
   112                                      ; 文字列を表示
   113 000005A2 68[1C06]E81AFB83C4-         cdecl puts, .s0
   113 000005AA 02                 
   114                                  
   115                                      ; ドライブ情報を取得
   116 000005AB 68[BA00]E8DBFC83C4-         cdecl get_drive_param, BOOT + drive
   116 000005B3 02                 
   117 000005B4 83F800                      cmp ax, 0
   118                                  .10Q:
   119 000005B7 750C                        jne .10E
   120                                  .10T:
   121 000005B9 68[5206]E803FB83C4-         cdecl puts, .e0
   121 000005C1 02                 
   122 000005C2 E81CFB                      call reboot
   123                                  .10E:
   124                                      ; ドライブ情報の表示
   125 000005C5 A1[BA00]                    mov ax, [BOOT + drive.no]
   126 000005C8 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100
   126 000005CF [3406]50E837FC83C4-
   126 000005D7 0A                 
   127 000005D8 A1[BC00]                    mov ax, [BOOT + drive.cyln]
   128 000005DB 6A046A106A0268-             cdecl itoa, ax, .p2, 2, 16, 0b0100
   128 000005E2 [3C06]50E824FC83C4-
   128 000005EA 0A                 
   129 000005EB A1[BE00]                    mov ax, [BOOT + drive.head]
   130 000005EE 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100
   130 000005F5 [4506]50E811FC83C4-
   130 000005FD 0A                 
   131 000005FE A1[C000]                    mov ax, [BOOT + drive.sect]
   132 00000601 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100
   132 00000608 [4D06]50E8FEFB83C4-
   132 00000610 0A                 
   133 00000611 68[2B06]E8ABFA83C4-         cdecl puts, .s1
   133 00000619 02                 
   134                                  
   135                                  
   136 0000061A EB51                        jmp stage_3rd
   137                                  
   138                                  .s0:
   139 0000061C 326E64207374616765-         db "2nd stage...", 0x0A, 0x0D, 0
   139 00000625 2E2E2E0A0D00       
   140                                  .s1:
   141 0000062B 2044726976653A3078          db " Drive:0x"
   142                                  .p1:
   143 00000634 20202C20433A3078            db "  , C:0x"
   144                                  .p2:
   145 0000063C 2020202C20483A3078          db "   , H:0x"
   146                                  .p3:
   147 00000645 20202C20533A3078            db "  , S:0x"
   148                                  .p4:
   149 0000064D 20200A0D00                  db "  ", 0x0A, 0x0D, 0
   150                                  
   151                                  .e0:
   152 00000652 43616E277420676574-         db "Can't get drive parameter.", 0
   152 0000065B 206472697665207061-
   152 00000664 72616D657465722E00 
   153                                  
   154                                  ; ****************************
   155                                  ; ブート処理の第3ステージ
   156                                  ; ****************************
   157                                  stage_3rd:
   158 0000066D 68[F506]E84FFA83C4-         cdecl puts, .s0
   158 00000675 02                 
   159                                  
   160 00000676 68[0002]E851FC83C4-         cdecl get_font_adr, FONT
   160 0000067E 02                 
   161                                  
   162                                      ; フォントアドレスの表示
   163 0000067F 6A046A106A0468-             cdecl itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   163 00000686 [1207]FF36[0002]E8-
   163 0000068D 7DFB83C40A         
   164 00000692 6A046A106A0468-             cdecl itoa, word [FONT.off], .p2, 4, 16, 0b0100
   164 00000699 [1707]FF36[0202]E8-
   164 000006A0 6AFB83C40A         
   165 000006A5 68[0407]E817FA83C4-         cdecl puts, .s1
   165 000006AD 02                 
   166                                  
   167                                  
   168                                      ; メモリ情報の取得と表示
   169 000006AE E83CFC                      cdecl get_mem_info
   170                                  
   171 000006B1 66A1[0402]                  mov eax, [ACPI_DATA.adr]
   172 000006B5 6683F800                    cmp eax, 0
   173 000006B9 742F                        je .12E
   174                                  
   175 000006BB 6A046A106A0468-             cdecl itoa, ax, .p4, 4, 16, 0b0100
   175 000006C2 [2D07]50E844FB83C4-
   175 000006CA 0A                 
   176 000006CB 66C1E810                    shr eax, 16
   177 000006CF 6A046A106A0468-             cdecl itoa, ax, .p3, 4, 16, 0b0100
   177 000006D6 [2907]50E830FB83C4-
   177 000006DE 0A                 
   178 000006DF 68[1E07]E8DDF983C4-         cdecl puts, .s2
   178 000006E7 02                 
   179 000006E8 EB09                        jmp .10E
   180                                  
   181                                  .12E:
   182 000006EA 68[3407]E8D2F983C4-         cdecl puts, .e0
   182 000006F2 02                 
   183                                  .10E:
   184                                  
   185 000006F3 EBFE                        jmp $
   186                                  
   187                                  .s0:
   188 000006F5 337264207374616765-         db "3rd stage...", 0x0A, 0x0D, 0
   188 000006FE 2E2E2E0A0D00       
   189                                  
   190                                  .s1:
   191 00000704 20466F6E7420416464-         db " Font Address="
   191 0000070D 726573733D         
   192                                  .p1:
   193 00000712 5A5A5A5A3A                  db "ZZZZ:"
   194                                  .p2:
   195 00000717 5A5A5A5A0A0D00              db "ZZZZ", 0x0A, 0x0D, 0
   196                                  
   197                                  .s2:
   198 0000071E 204143504920646174-         db " ACPI data="
   198 00000727 613D               
   199                                  .p3:
   200 00000729 5A5A5A5A                    db "ZZZZ"
   201                                  .p4:
   202 0000072D 5A5A5A5A0A0D00              db "ZZZZ", 0x0A, 0x0D, 0
   203                                  
   204                                  .e0:
   205 00000734 4661696C656420746F-         db "Failed to load ACPI Table", 0x0A, 0x0D, 0
   205 0000073D 206C6F616420414350-
   205 00000746 49205461626C650A0D-
   205 0000074F 00                 
   206                                  
   207                                  
   208                                  ; ****************************
   209                                  ; padding (このファイルは8kバイトとする)
   210                                  ; ****************************
   211 00000750 00<rept>                    times BOOT_SIZE - ($ - $$) db 0
