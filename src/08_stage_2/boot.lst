     1                                  ; エントリーポイント
     2                                  
     3                                  BOOT_LOAD equ 0x7c00
     4                                  
     5                                  org BOOT_LOAD
     6                                  
     7                                  ; ****************************
     8                                  ; マクロ
     9                                  ; ****************************
    10                                  %include "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1>     
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1> 
     8                              <1>     %rotate -1
     9                              <1>         call %1
    10                              <1>     
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    11                                  
    12                                  ; ****************************
    13                                  ; エントリーポイント
    14                                  ; ****************************
    15                                  entry:
    16 00000000 EB58                        jmp ipl
    17                                  
    18                                      ; ---------
    19                                      ; BPB (BIOS Parameter Block)
    20                                      ; ---------
    21 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    22                                  
    23                                      ; ---------
    24                                      ; IPL(Initial Program Loader)
    25                                      ; --------- 
    26                                  
    27                                  ipl:
    28                                      ; BIOSが利用した時の値がそのまま残っているので、セグメントやスタックの値を設定しなおす
    29 0000005A FA                          cli ; セグメントの初期化や割り込みの設定時に割り込みが呼ばれてほしくないので、いったん止める
    30                                  
    31 0000005B B80000                      mov ax, 0x0000
    32 0000005E 8ED8                        mov ds, ax
    33 00000060 8EC0                        mov es, ax
    34 00000062 8ED0                        mov ss, ax
    35 00000064 BC007C                      mov sp, BOOT_LOAD ; スタックはブートローダーが読み込まれた場所から上に伸びていく
    36                                  
    37 00000067 FB                          sti ; 割り込みのうけつけを再開する
    38                                  
    39 00000068 8816[B800]                  mov [BOOT.DRIVE], dl ; ドライブ番号の保存
    40                                  
    41                                      ; 文字列を表示
    42 0000006C 68[9800]E85D0083C4-         cdecl puts, .s0
    42 00000074 02                 
    43                                  
    44                                      ; ハードディスクから、512~(ブートセクションより先の部分)を読み出す
    45 00000075 B402                        mov ah, 0x02 ;          AH = 読み込み命令
    46 00000077 B001                        mov al, 1 ;             AL = 読み込みセクタ数
    47 00000079 B90200                      mov cx, 0x0002;         CX = (CL[7:6]CH[7:0] = シリンダ, CL[5:0] = セクタ)
    48 0000007C B600                        mov dh, 0x00;           DH = ヘッド番号
    49 0000007E 8A16[B800]                  mov dl, [BOOT.DRIVE] ;  DL = ドライブ番号
    50 00000082 BB007E                      mov bx, 0x7c00 + 512 ;  ES:BX = 読み込み位置
    51 00000085 CD13                        int 0x13
    52                                  .10Q:
    53 00000087 730C                        jnc .10E ; CF = 0 (エラーが発生した)の場合、再起動
    54                                  .10T:
    55 00000089 68[A500]E8400083C4-         cdecl puts, .e0
    55 00000091 02                 
    56 00000092 E8D900                      call reboot
    57                                  .10E:
    58 00000095 E96801                      jmp stage_2
    59                                  
    60 00000098 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0 ; 0x0A = LF, 0x0D = CR
    60 000000A1 2E0A0D00           
    61 000000A5 4572726F723A207365-     .e0 db "Error: sector read", 0
    61 000000AE 63746F722072656164-
    61 000000B7 00                 
    62                                  
    63                                  
    64                                  ALIGN 2, db 0
    65                                  BOOT: ; ブートドライブに関する情報
    66 000000B8 0000                        .DRIVE dw 0 ; ドライブ番号
    67                                  
    68                                  
    69                                  ; ****************************
    70                                  ; モジュール
    71                                  ; ****************************
    72                                  %include "../modules/real/putc.s"
     1                              <1> ; putc
     2                              <1> ; @params ch (2 bytes) 文字コード
     3                              <1> ; @returns void
     4                              <1> ; @example
     5                              <1> ;   cdecl putc 'A' ; 'A'
     6                              <1> putc:
     7                              <1>     ; スタックフレームの構築
     8 000000BA 55                  <1>     push bp
     9 000000BB 89E5                <1>     mov bp, sp
    10                              <1> 
    11                              <1>     ;+ 4 | 出力文字
    12                              <1>     ;+ 2 | IP
    13                              <1>     ;+ 0 | BP
    14                              <1> 
    15                              <1>     ; レジスタの保存
    16 000000BD 50                  <1>     push ax
    17 000000BE 53                  <1>     push bx
    18                              <1> 
    19 000000BF 8A4604              <1>     mov al, [bp + 4]
    20 000000C2 B40E                <1>     mov ah, 0x0e
    21 000000C4 BB0000              <1>     mov bx, 0x0000
    22 000000C7 CD10                <1>     int 0x10
    23                              <1> 
    24                              <1>     ; レジスタの復帰
    25 000000C9 5B                  <1>     pop bx
    26 000000CA 58                  <1>     pop ax
    27                              <1> 
    28                              <1>     ; スタックフレームの破棄
    29 000000CB 89EC                <1>     mov sp, bp
    30 000000CD 5D                  <1>     pop bp
    31                              <1> 
    32 000000CE C3                  <1>     ret
    73                                  %include "../modules/real/puts.s"
     1                              <1> ; puts
     2                              <1> ; @params address (2 bytes) 表示文字列へのアドレス
     3                              <1> ; @returns void
     4                              <1> ; @example
     5                              <1> ; cdecl puts, .s0
     6                              <1> 
     7                              <1> puts:
     8                              <1>     ; スタックフレームの構築
     9 000000CF 55                  <1>     push bp
    10 000000D0 89E5                <1>     mov bp, sp
    11                              <1> 
    12                              <1>     ; + 4 | 文字列へのアドレス
    13                              <1>     ; + 2 | IP
    14                              <1>     ; + 0 | BP
    15                              <1>     
    16                              <1>     ; レジスタの保存
    17 000000D2 50                  <1>     push ax
    18 000000D3 53                  <1>     push bx
    19 000000D4 56                  <1>     push si
    20                              <1> 
    21                              <1>     ; save arguments
    22 000000D5 8B7604              <1>     mov si, [bp + 4]
    23                              <1> 
    24 000000D8 B40E                <1>     mov ah, 0x0e   ; テレタイプ式1文字出力
    25 000000DA BB0000              <1>     mov bx, 0x0000 ; ページ番号と文字色を0に設定
    26 000000DD FC                  <1>     cld ; DF = 0
    27                              <1> 
    28                              <1> .10L:
    29 000000DE AC                  <1>     lodsb ; al = *si++;
    30                              <1> 
    31 000000DF 3C00                <1>     cmp al, 0
    32 000000E1 7404                <1>     je .10E
    33                              <1> 
    34 000000E3 CD10                <1>     int 0x10
    35 000000E5 EBF7                <1>     jmp .10L
    36                              <1> 
    37                              <1> .10E:
    38                              <1> 
    39                              <1>     ; restore registers
    40 000000E7 5E                  <1>     pop si
    41 000000E8 5B                  <1>     pop bx
    42 000000E9 58                  <1>     pop ax
    43                              <1> 
    44                              <1>     ; discard stack frame
    45                              <1> 
    46 000000EA 89EC                <1>     mov sp, bp
    47 000000EC 5D                  <1>     pop bp
    48                              <1> 
    49 000000ED C3                  <1>     ret
    74                                  %include "../modules/real/itoa.s"
     1                              <1> ; itoa
     2                              <1> ; @params
     3                              <1> ;   num: 変換する値
     4                              <1> ;   buff: 保存先アドレス
     5                              <1> ;   size: 保存先バッファサイズ
     6                              <1> ;   radix: 基数(2 or 8 or 10 or 16)
     7                              <1> ;   flags: ビット定義のフラグ
     8                              <1> ;       B2: 空白を0で埋める
     9                              <1> ;       B1: '+/-'記号を付加する
    10                              <1> ;       B0: 値を符号付き変数として扱う
    11                              <1> ; @example
    12                              <1> ;   cdecl, itoa, 8086, .s1, 8, 10, 0b0001 ; "    8086"
    13                              <1> 
    14                              <1> itoa:
    15                              <1>     ; stack frame
    16 000000EE 55                  <1>     push bp
    17 000000EF 89E5                <1>     mov bp, sp
    18                              <1> 
    19                              <1>     ; + 12 | flags
    20                              <1>     ; + 10 | 基数
    21                              <1>     ; +  8 | 保存先バッファサイズ
    22                              <1>     ; +  6 | 保存先アドレス
    23                              <1>     ; +  4 | 変換する値
    24                              <1>     ; +  2 | IP
    25                              <1>     ; +  0 | BP
    26                              <1> 
    27                              <1>     ; save registers
    28 000000F1 50                  <1>     push ax
    29 000000F2 53                  <1>     push bx
    30 000000F3 51                  <1>     push cx
    31 000000F4 52                  <1>     push dx
    32 000000F5 56                  <1>     push si
    33 000000F6 57                  <1>     push di
    34                              <1> 
    35                              <1>     ; 引数を取得
    36 000000F7 8B4604              <1>     mov ax, [bp + 4]
    37 000000FA 8B7606              <1>     mov si, [bp + 6]
    38 000000FD 8B4E08              <1>     mov cx, [bp + 8]
    39                              <1> 
    40 00000100 89F7                <1>     mov di, si
    41 00000102 01CF                <1>     add di, cx ; dst = &dst[size - 1]
    42 00000104 4F                  <1>     dec di
    43                              <1> 
    44 00000105 8B5E0C              <1>     mov bx, word [bp + 12] ; flags = オプション
    45                              <1> 
    46                              <1>     ; 符号付き数値として扱うかを判定する
    47                              <1>     ; もし負の数だったらB1をtrueにする
    48 00000108 F7C30100            <1>     test bx, 0b0001
    49                              <1> .10Q:
    50 0000010C 7408                <1>     je .10E ; ZF = 0(先のtest演算の結果が0になっていたら、つまり、オプションが無効であればスキップ)
    51 0000010E 83F800              <1>     cmp ax, 0 ; if num < 0
    52 00000111 7D03                <1>     jge .12E
    53 00000113 83CB02              <1>     or bx, 0b0010 ; flags |= 2
    54                              <1> .12E:
    55                              <1> .10E:
    56                              <1> 
    57                              <1>     ; 符号を出力するか判定する
    58 00000116 F7C30200            <1>     test bx, 0b0010
    59                              <1> .20Q:
    60 0000011A 7410                <1>     je .20E
    61 0000011C 83F800              <1>     cmp ax, 0 ; if num < 0
    62                              <1> .22Q:
    63 0000011F 7D07                <1>     jge .22F
    64 00000121 F7D8                <1>     neg ax ; num *= -1
    65 00000123 C6042D              <1>     mov [si], byte '-' ; 符号を表示する
    66 00000126 EB03                <1>     jmp .22E
    67                              <1> .22F:
    68 00000128 C6042B              <1>     mov [si], byte '+'    
    69                              <1> .22E:
    70 0000012B 49                  <1>     dec cx ; size--
    71                              <1> .20E:
    72                              <1> 
    73                              <1> 
    74                              <1>     ; ASCII変換
    75 0000012C 8B5E0A              <1>     mov bx, [bp + 10] ; 基数
    76                              <1> .30L:
    77 0000012F BA0000              <1>     mov dx, 0
    78                              <1>     ; div
    79                              <1>     ; AX = DX:AX / 基数
    80                              <1>     ; DX = DX:AX % 基数
    81 00000132 F7F3                <1>     div bx
    82                              <1> 
    83 00000134 89D6                <1>     mov si, dx ; si = 余り
    84 00000136 8A94[5E01]          <1>     mov dl, byte [.ascii + si] ; 変換テーブルから、余り(数値)を文字に変換
    85                              <1> 
    86 0000013A 8815                <1>     mov [di], dl
    87 0000013C 4F                  <1>     dec di
    88                              <1> 
    89 0000013D 83F800              <1>     cmp ax, 0
    90 00000140 E0ED                <1>     loopnz .30L ; ax != 0なら.30Lに戻る
    91                              <1> .30E:
    92                              <1> 
    93                              <1> 
    94                              <1>     ; 空欄を埋める
    95 00000142 83F900              <1>     cmp cx, 0
    96                              <1> .40Q:
    97 00000145 740D                <1>     je .40E
    98 00000147 B020                <1>     mov al, ' '
    99 00000149 837E0C04            <1>     cmp [bp + 12], word 0b0100
   100 0000014D 7502                <1>     jne .42E
   101 0000014F B030                <1>     mov al, '0'
   102                              <1> .42E:
   103 00000151 FD                  <1>     std ; DF = 1 (マイナス方向に伸ばしていく)
   104 00000152 F3AA                <1>     rep stosb ; while (cx > 0) { [di] = al; di--; cx--; }
   105                              <1> .40E:
   106                              <1> 
   107                              <1>     ; レジスタの復元
   108 00000154 5F                  <1>     pop di
   109 00000155 5E                  <1>     pop si
   110 00000156 5A                  <1>     pop dx
   111 00000157 59                  <1>     pop cx
   112 00000158 5B                  <1>     pop bx
   113 00000159 58                  <1>     pop ax
   114                              <1> 
   115                              <1>     ; スタックフレームの破棄
   116 0000015A 89EC                <1>     mov sp, bp
   117 0000015C 5D                  <1>     pop bp
   118                              <1> 
   119 0000015D C3                  <1>     ret
   120                              <1> 
   121 0000015E 303132333435363738- <1> .ascii db "0123456789ABCDEF"
   121 00000167 39414243444546      <1>
    75                                  %include "../modules/real/reboot.s"
     1                              <1> ; reboot
     2                              <1> ; @params
     3                              <1> ; @returns
     4                              <1> ; @example
     5                              <1> ;   cdecl reboot
     6                              <1> 
     7                              <1> reboot:
     8                              <1>     ; メッセージを表示
     9 0000016E 68[8A01]E85BFF83C4- <1>     cdecl puts, .s0
     9 00000176 02                  <1>
    10                              <1> 
    11                              <1>     ; キー入力を待つ
    12                              <1> .10L:
    13 00000177 B410                <1>     mov ah, 0x10 ; Read expanded keyboard character https://en.wikipedia.org/wiki/INT_16H
    14 00000179 CD16                <1>     int 0x16 ; キー入力を待つ
    15                              <1> 
    16 0000017B 3C20                <1>     cmp al, ' '
    17 0000017D 75F8                <1>     jne .10L
    18                              <1> 
    19                              <1>     ; 改行を出力
    20 0000017F 68[A901]E84AFF83C4- <1>     cdecl puts, .s1
    20 00000187 02                  <1>
    21                              <1> 
    22                              <1>     ; 再起動
    23 00000188 CD19                <1>     int 0x19
    24                              <1> 
    25 0000018A 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot....", 0
    25 00000193 414345206B65792074- <1>
    25 0000019C 6F207265626F6F742E- <1>
    25 000001A5 2E2E2E00            <1>
    26 000001A9 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    76                                  
    77                                  ; ****************************
    78                                  ; ブートフラグ
    79                                  ; ****************************
    80 000001AE 00<rept>                    times 510 - ($ - $$) db 0x00
    81 000001FE 55AA                        db 0x55, 0xaa
    82                                  
    83                                  
    84                                  ; ****************************
    85                                  ; ブート処理の第2ステージ
    86                                  ; ****************************
    87                                  stage_2:
    88                                  
    89                                      ; 文字列を表示
    90 00000200 68[0B02]E8C9FE83C4-         cdecl puts, .s0
    90 00000208 02                 
    91                                  
    92                                      ; 処理の終了
    93 00000209 EBFE                        jmp $
    94                                  
    95                                  .s0:
    96 0000020B 326E64207374616765-         db "2nd stage...", 0x0A, 0x0D, 0
    96 00000214 2E2E2E0A0D00       
    97                                  
    98                                  
    99                                  ; ****************************
   100                                  ; padding (このファイルは8kバイトとする)
   101                                  ; ****************************
   102 0000021A 00<rept>                    times (1024 * 8) - ($ - $$) db 0
