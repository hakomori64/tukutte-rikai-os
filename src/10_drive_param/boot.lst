     1                                  ; ****************************
     2                                  ; マクロ
     3                                  ; ****************************
     4                                  %include "../include/define.s"
     1                              <1> BOOT_LOAD equ 0x7c00 ; ブートプログラムのロード位置
     2                              <1> 
     3                              <1> BOOT_SIZE equ (1024 * 8) ; ブートプログラムのサイズ
     4                              <1> SECT_SIZE equ (512) ; セクタサイズ
     5                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     5                                  %include "../include/macro.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1>     .no     resw 1 ; ドライブ番号
     3 00000002 <res 00000002>      <1>     .cyln   resw 1 ; シリンダ
     4 00000004 <res 00000002>      <1>     .head   resw 1 ; ヘッド
     5 00000006 <res 00000002>      <1>     .sect   resw 1 ; セクタ
     6                              <1> endstruc
     7                              <1> 
     8                              <1> %macro cdecl 1-*.nolist
     9                              <1>     
    10                              <1>     %rep %0 - 1
    11                              <1>         push %{-1:-1}
    12                              <1>         %rotate -1
    13                              <1>     %endrep
    14                              <1> 
    15                              <1>     %rotate -1
    16                              <1>         call %1
    17                              <1>     
    18                              <1>     %if 1 < %0
    19                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1>     %endif
    21                              <1> 
    22                              <1> %endmacro
     6                                  
     7                                  org BOOT_LOAD
     8                                  
     9                                  ; ****************************
    10                                  ; エントリーポイント
    11                                  ; ****************************
    12                                  entry:
    13 00000000 EB58                        jmp ipl
    14                                  
    15                                      ; ---------
    16                                      ; BPB (BIOS Parameter Block)
    17                                      ; ---------
    18 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    19                                  
    20                                      ; ---------
    21                                      ; IPL(Initial Program Loader)
    22                                      ; --------- 
    23                                  
    24                                  ipl:
    25                                      ; BIOSが利用した時の値がそのまま残っているので、セグメントやスタックの値を設定しなおす
    26 0000005A FA                          cli ; セグメントの初期化や割り込みの設定時に割り込みが呼ばれてほしくないので、いったん止める
    27                                  
    28 0000005B B80000                      mov ax, 0x0000
    29 0000005E 8ED8                        mov ds, ax
    30 00000060 8EC0                        mov es, ax
    31 00000062 8ED0                        mov ss, ax
    32 00000064 BC007C                      mov sp, BOOT_LOAD ; スタックはブートローダーが読み込まれた場所から上に伸びていく
    33                                  
    34 00000067 FB                          sti ; 割り込みのうけつけを再開する
    35                                  
    36 00000068 8816[BA00]                  mov [BOOT + drive.no], dl ; ドライブ番号の保存
    37                                  
    38                                      ; 文字列を表示
    39 0000006C 68[9900]E8500083C4-         cdecl puts, .s0
    39 00000074 02                 
    40                                  
    41                                      ; ハードディスクから、512~を読み出す
    42 00000075 BB0F00                      mov bx, BOOT_SECT - 1 ; 残りのブートセクタ数
    43 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE ; 次にロードされるべきアドレス
    44                                  
    45 0000007B 515368[BA00]E89E00-         cdecl read_chs, BOOT + drive, bx, cx
    45 00000083 83C406             
    46                                  
    47 00000086 39D8                        cmp ax, bx
    48                                  .10Q:
    49 00000088 740C                        jz .10E ; 指定したサイズだけ読み出しができていればよし
    50                                  .10T:
    51                                      ; そうでなかったら再起動
    52 0000008A 68[A600]E8320083C4-         cdecl puts, .e0
    52 00000092 02                 
    53 00000093 E84B00                      call reboot
    54                                  .10E:
    55 00000096 E92802                      jmp stage_2
    56                                  
    57 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0 ; 0x0A = LF, 0x0D = CR
    57 000000A2 2E0A0D00           
    58 000000A6 4572726F723A207365-     .e0 db "Error: sector read", 0
    58 000000AF 63746F722072656164-
    58 000000B8 00                 
    59                                  
    60                                  
    61 000000B9 00                      ALIGN 2, db 0
    62                                  BOOT: ; ブートドライブに関する情報
    63                                      istruc drive
    64 000000BA 0000                            at drive.no,    dw 0
    65 000000BC 0000                            at drive.cyln,  dw 0
    66 000000BE 0000                            at drive.head,  dw 0
    67 000000C0 0200                            at drive.sect,  dw 2
    68                                      iend
    69                                  
    70                                  
    71                                  ; ****************************
    72                                  ; 最初の512バイト内の処理で必要なモジュール
    73                                  ; ****************************
    74                                  %include "../modules/real/puts.s"
     1                              <1> ; puts
     2                              <1> ; @params address (2 bytes) 表示文字列へのアドレス
     3                              <1> ; @returns void
     4                              <1> ; @example
     5                              <1> ; cdecl puts, .s0
     6                              <1> 
     7                              <1> puts:
     8                              <1>     ; スタックフレームの構築
     9 000000C2 55                  <1>     push bp
    10 000000C3 89E5                <1>     mov bp, sp
    11                              <1> 
    12                              <1>     ; + 4 | 文字列へのアドレス
    13                              <1>     ; + 2 | IP
    14                              <1>     ; + 0 | BP
    15                              <1>     
    16                              <1>     ; レジスタの保存
    17 000000C5 50                  <1>     push ax
    18 000000C6 53                  <1>     push bx
    19 000000C7 56                  <1>     push si
    20                              <1> 
    21                              <1>     ; save arguments
    22 000000C8 8B7604              <1>     mov si, [bp + 4]
    23                              <1> 
    24 000000CB B40E                <1>     mov ah, 0x0e   ; テレタイプ式1文字出力
    25 000000CD BB0000              <1>     mov bx, 0x0000 ; ページ番号と文字色を0に設定
    26 000000D0 FC                  <1>     cld ; DF = 0
    27                              <1> 
    28                              <1> .10L:
    29 000000D1 AC                  <1>     lodsb ; al = *si++;
    30                              <1> 
    31 000000D2 3C00                <1>     cmp al, 0
    32 000000D4 7404                <1>     je .10E
    33                              <1> 
    34 000000D6 CD10                <1>     int 0x10
    35 000000D8 EBF7                <1>     jmp .10L
    36                              <1> 
    37                              <1> .10E:
    38                              <1> 
    39                              <1>     ; restore registers
    40 000000DA 5E                  <1>     pop si
    41 000000DB 5B                  <1>     pop bx
    42 000000DC 58                  <1>     pop ax
    43                              <1> 
    44                              <1>     ; discard stack frame
    45                              <1> 
    46 000000DD 89EC                <1>     mov sp, bp
    47 000000DF 5D                  <1>     pop bp
    48                              <1> 
    49 000000E0 C3                  <1>     ret
    75                                  %include "../modules/real/reboot.s"
     1                              <1> ; reboot
     2                              <1> ; @params
     3                              <1> ; @returns
     4                              <1> ; @example
     5                              <1> ;   cdecl reboot
     6                              <1> 
     7                              <1> reboot:
     8                              <1>     ; メッセージを表示
     9 000000E1 68[FD00]E8DBFF83C4- <1>     cdecl puts, .s0
     9 000000E9 02                  <1>
    10                              <1> 
    11                              <1>     ; キー入力を待つ
    12                              <1> .10L:
    13 000000EA B410                <1>     mov ah, 0x10 ; Read expanded keyboard character https://en.wikipedia.org/wiki/INT_16H
    14 000000EC CD16                <1>     int 0x16 ; キー入力を待つ
    15                              <1> 
    16 000000EE 3C20                <1>     cmp al, ' '
    17 000000F0 75F8                <1>     jne .10L
    18                              <1> 
    19                              <1>     ; 改行を出力
    20 000000F2 68[1C01]E8CAFF83C4- <1>     cdecl puts, .s1
    20 000000FA 02                  <1>
    21                              <1> 
    22                              <1>     ; 再起動
    23 000000FB CD19                <1>     int 0x19
    24                              <1> 
    25 000000FD 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot....", 0
    25 00000106 414345206B65792074- <1>
    25 0000010F 6F207265626F6F742E- <1>
    25 00000118 2E2E2E00            <1>
    26 0000011C 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    76                                  %include "../modules/real/read_chs.s"
     1                              <1> ; read_chs
     2                              <1> ; @params
     3                              <1> ;   drive: drive構造体のアドレス
     4                              <1> ;   sect: 読み出しセクタ数
     5                              <1> ;   dst: 読み出し先アドレス
     6                              <1> ; @returns
     7                              <1> ;   ax: 読み出したセクタ数
     8                              <1> ; @example
     9                              <1> ;   cdecl read_chs, read_chs, BOOT + drive, BOOT_SECT - 1, BOOT_LOAD + SECT_SIZE
    10                              <1> 
    11                              <1> read_chs:
    12                              <1>     ; スタックフレームの構築
    13                              <1> 
    14 00000121 55                  <1>     push bp
    15 00000122 89E5                <1>     mov bp, sp
    16 00000124 6A03                <1>     push 3 ; リトライ回数
    17 00000126 6A00                <1>     push 0 ; 読み込みセクタ数
    18                              <1> 
    19                              <1>     ;+ 8 | 読み出し先アドレス
    20                              <1>     ;+ 6 | 読み出しセクタ数
    21                              <1>     ;+ 4 | drive構造体のアドレス
    22                              <1>     ;+ 2 | IP
    23                              <1>     ;+ 0 | BP
    24                              <1>     ;- 2 | リトライ回数
    25                              <1>     ;- 4 | 読み込みセクタ数
    26                              <1> 
    27                              <1>     ; レジスタの保存
    28 00000128 53                  <1>     push bx
    29 00000129 51                  <1>     push cx
    30 0000012A 52                  <1>     push dx
    31 0000012B 06                  <1>     push es
    32 0000012C 56                  <1>     push si
    33                              <1> 
    34                              <1>     ; 処理の開始
    35 0000012D 8B7604              <1>     mov si, [bp + 4] ;si = ドライブ構造体のアドレス
    36                              <1> 
    37 00000130 8A6C02              <1>     mov ch, [si + drive.cyln + 0] ; シリンダ番号の下位バイト
    38 00000133 8A4C03              <1>     mov cl, [si + drive.cyln + 1] ; シリンダ番号の上位バイト
    39 00000136 C0E106              <1>     shl cl, 6
    40 00000139 0A4C06              <1>     or cl, [si + drive.sect]
    41                              <1> 
    42                              <1>     ; セクタ読み込み
    43 0000013C 8A7404              <1>     mov dh, [si + drive.head]
    44 0000013F 8A14                <1>     mov dl, [si + drive.no]
    45 00000141 B80000              <1>     mov ax, 0x0000
    46 00000144 8EC0                <1>     mov es, ax
    47 00000146 8B5E08              <1>     mov bx, [bp + 8] ; es(0x0000):bx(読み込み先アドレス)に読み込み
    48                              <1> 
    49                              <1> .10L:
    50 00000149 B402                <1>     mov ah, 0x02
    51 0000014B 8A4606              <1>     mov al, [bp + 6]
    52                              <1> 
    53 0000014E CD13                <1>     int 0x13
    54 00000150 7304                <1>     jnc .11E ; if failed: al = 0 && break
    55                              <1> 
    56 00000152 B000                <1>     mov al, 0
    57 00000154 EB0C                <1>     jmp .10E
    58                              <1> 
    59                              <1> .11E:
    60 00000156 3C00                <1>     cmp al, 0 ; if 読み出したセクタ数 == 0
    61 00000158 7508                <1>     jne .10E
    62                              <1> 
    63 0000015A B80000              <1>     mov ax, 0
    64 0000015D FF4EFE              <1>     dec word [bp - 2]
    65 00000160 75E7                <1>     jnz .10L ; リトライ回数だけリトライ
    66                              <1> 
    67                              <1> .10E:
    68 00000162 B400                <1>     mov ah, 0 ; ステータスは破棄
    69                              <1> 
    70                              <1>     ; レジスタの復帰
    71 00000164 5E                  <1>     pop si
    72 00000165 07                  <1>     pop es
    73 00000166 5A                  <1>     pop dx
    74 00000167 59                  <1>     pop cx
    75 00000168 5B                  <1>     pop bx
    76                              <1> 
    77                              <1>     ; スタックフレームの破棄
    78 00000169 89EC                <1>     mov sp, bp
    79 0000016B 5D                  <1>     pop bp
    80                              <1> 
    81 0000016C C3                  <1>     ret
    77                                  
    78                                  ; ****************************
    79                                  ; ブートフラグ
    80                                  ; ****************************
    81 0000016D 00<rept>                    times 510 - ($ - $$) db 0x00
    82 000001FE 55AA                        db 0x55, 0xaa
    83                                  
    84                                  
    85                                  ; ****************************
    86                                  ; 512バイト以降の処理で必要なモジュール
    87                                  ; ****************************
    88                                  %include "../modules/real/itoa.s"
     1                              <1> ; itoa
     2                              <1> ; @params
     3                              <1> ;   num: 変換する値
     4                              <1> ;   buff: 保存先アドレス
     5                              <1> ;   size: 保存先バッファサイズ
     6                              <1> ;   radix: 基数(2 or 8 or 10 or 16)
     7                              <1> ;   flags: ビット定義のフラグ
     8                              <1> ;       B2: 空白を0で埋める
     9                              <1> ;       B1: '+/-'記号を付加する
    10                              <1> ;       B0: 値を符号付き変数として扱う
    11                              <1> ; @example
    12                              <1> ;   cdecl, itoa, 8086, .s1, 8, 10, 0b0001 ; "    8086"
    13                              <1> 
    14                              <1> itoa:
    15                              <1>     ; stack frame
    16 00000200 55                  <1>     push bp
    17 00000201 89E5                <1>     mov bp, sp
    18                              <1> 
    19                              <1>     ; + 12 | flags
    20                              <1>     ; + 10 | 基数
    21                              <1>     ; +  8 | 保存先バッファサイズ
    22                              <1>     ; +  6 | 保存先アドレス
    23                              <1>     ; +  4 | 変換する値
    24                              <1>     ; +  2 | IP
    25                              <1>     ; +  0 | BP
    26                              <1> 
    27                              <1>     ; save registers
    28 00000203 50                  <1>     push ax
    29 00000204 53                  <1>     push bx
    30 00000205 51                  <1>     push cx
    31 00000206 52                  <1>     push dx
    32 00000207 56                  <1>     push si
    33 00000208 57                  <1>     push di
    34                              <1> 
    35                              <1>     ; 引数を取得
    36 00000209 8B4604              <1>     mov ax, [bp + 4]
    37 0000020C 8B7606              <1>     mov si, [bp + 6]
    38 0000020F 8B4E08              <1>     mov cx, [bp + 8]
    39                              <1> 
    40 00000212 89F7                <1>     mov di, si
    41 00000214 01CF                <1>     add di, cx ; dst = &dst[size - 1]
    42 00000216 4F                  <1>     dec di
    43                              <1> 
    44 00000217 8B5E0C              <1>     mov bx, word [bp + 12] ; flags = オプション
    45                              <1> 
    46                              <1>     ; 符号付き数値として扱うかを判定する
    47                              <1>     ; もし負の数だったらB1をtrueにする
    48 0000021A F7C30100            <1>     test bx, 0b0001
    49                              <1> .10Q:
    50 0000021E 7408                <1>     je .10E ; ZF = 0(先のtest演算の結果が0になっていたら、つまり、オプションが無効であればスキップ)
    51 00000220 83F800              <1>     cmp ax, 0 ; if num < 0
    52 00000223 7D03                <1>     jge .12E
    53 00000225 83CB02              <1>     or bx, 0b0010 ; flags |= 2
    54                              <1> .12E:
    55                              <1> .10E:
    56                              <1> 
    57                              <1>     ; 符号を出力するか判定する
    58 00000228 F7C30200            <1>     test bx, 0b0010
    59                              <1> .20Q:
    60 0000022C 7410                <1>     je .20E
    61 0000022E 83F800              <1>     cmp ax, 0 ; if num < 0
    62                              <1> .22Q:
    63 00000231 7D07                <1>     jge .22F
    64 00000233 F7D8                <1>     neg ax ; num *= -1
    65 00000235 C6042D              <1>     mov [si], byte '-' ; 符号を表示する
    66 00000238 EB03                <1>     jmp .22E
    67                              <1> .22F:
    68 0000023A C6042B              <1>     mov [si], byte '+'    
    69                              <1> .22E:
    70 0000023D 49                  <1>     dec cx ; size--
    71                              <1> .20E:
    72                              <1> 
    73                              <1> 
    74                              <1>     ; ASCII変換
    75 0000023E 8B5E0A              <1>     mov bx, [bp + 10] ; 基数
    76                              <1> .30L:
    77 00000241 BA0000              <1>     mov dx, 0
    78                              <1>     ; div
    79                              <1>     ; AX = DX:AX / 基数
    80                              <1>     ; DX = DX:AX % 基数
    81 00000244 F7F3                <1>     div bx
    82                              <1> 
    83 00000246 89D6                <1>     mov si, dx ; si = 余り
    84 00000248 8A94[7002]          <1>     mov dl, byte [.ascii + si] ; 変換テーブルから、余り(数値)を文字に変換
    85                              <1> 
    86 0000024C 8815                <1>     mov [di], dl
    87 0000024E 4F                  <1>     dec di
    88                              <1> 
    89 0000024F 83F800              <1>     cmp ax, 0
    90 00000252 E0ED                <1>     loopnz .30L ; ax != 0なら.30Lに戻る
    91                              <1> .30E:
    92                              <1> 
    93                              <1> 
    94                              <1>     ; 空欄を埋める
    95 00000254 83F900              <1>     cmp cx, 0
    96                              <1> .40Q:
    97 00000257 740D                <1>     je .40E
    98 00000259 B020                <1>     mov al, ' '
    99 0000025B 837E0C04            <1>     cmp [bp + 12], word 0b0100
   100 0000025F 7502                <1>     jne .42E
   101 00000261 B030                <1>     mov al, '0'
   102                              <1> .42E:
   103 00000263 FD                  <1>     std ; DF = 1 (マイナス方向に伸ばしていく)
   104 00000264 F3AA                <1>     rep stosb ; while (cx > 0) { [di] = al; di--; cx--; }
   105                              <1> .40E:
   106                              <1> 
   107                              <1>     ; レジスタの復元
   108 00000266 5F                  <1>     pop di
   109 00000267 5E                  <1>     pop si
   110 00000268 5A                  <1>     pop dx
   111 00000269 59                  <1>     pop cx
   112 0000026A 5B                  <1>     pop bx
   113 0000026B 58                  <1>     pop ax
   114                              <1> 
   115                              <1>     ; スタックフレームの破棄
   116 0000026C 89EC                <1>     mov sp, bp
   117 0000026E 5D                  <1>     pop bp
   118                              <1> 
   119 0000026F C3                  <1>     ret
   120                              <1> 
   121 00000270 303132333435363738- <1> .ascii db "0123456789ABCDEF"
   121 00000279 39414243444546      <1>
    89                                  %include "../modules/real/get_drive_param.s"
     1                              <1> ; get_drive_param
     2                              <1> ; @params
     3                              <1> ;   drive: drive構造体のアドレス. noを事前にセットしておく
     4                              <1> ; @return
     5                              <1> ;    ax : セクタ数
     6                              <1> ; @example
     7                              <1> ;   cdecl get_drive_param BOOT + drive
     8                              <1> 
     9                              <1> get_drive_param:
    10                              <1>     ; スタックフレーム構築
    11 00000280 55                  <1>     push bp
    12 00000281 89E5                <1>     mov bp, sp
    13                              <1> 
    14                              <1>     ; + 4 | drive構造体のアドレス
    15                              <1>     ; + 2 | IP
    16                              <1>     ; + 0 | BP
    17                              <1> 
    18                              <1>     ; レジスタの保存
    19 00000283 53                  <1>     push bx
    20 00000284 51                  <1>     push cx
    21 00000285 06                  <1>     push es
    22 00000286 56                  <1>     push si
    23 00000287 57                  <1>     push di
    24                              <1> 
    25                              <1>     ; INT 0x13(AH = 8)を呼び出す
    26                              <1>     ; @params DL = ドライブ番号
    27                              <1>     ; @returns 実際にアクセス可能な最終地点が帰ってくる
    28                              <1>     ;   CF : 失敗
    29                              <1>     ;   AH : リターンコード
    30                              <1>     ;   BL : FDDタイプ(1 = 360K, 2 = 1.2M, 3 = 720K, 4 = 1.44M)
    31                              <1>     ;   CL[7:6] : シリンダ(上位2bit)
    32                              <1>     ;   CH : シリンダ(下位8bit)
    33                              <1>     ;   CL[5:0] : セクタ
    34                              <1>     ;   DH : ヘッド
    35                              <1>     ;   DL : ドライブ
    36                              <1>     ;   ES:DI : ディスクベーステーブルのアドレス(詳細な情報が格納される)
    37                              <1> 
    38                              <1>     ; 処理の開始
    39 00000288 8B7604              <1>     mov si, [bp + 4]
    40 0000028B B80000              <1>     mov ax, 0
    41 0000028E 8EC0                <1>     mov es, ax
    42 00000290 89C7                <1>     mov di, ax
    43                              <1> 
    44 00000292 B408                <1>     mov ah, 8
    45 00000294 8A14                <1>     mov dl, [si + drive.no]
    46 00000296 CD13                <1>     int 0x13
    47                              <1> 
    48                              <1> .10Q:
    49 00000298 721B                <1>     jc .10F
    50                              <1> .10T:
    51 0000029A 88C8                <1>     mov al, cl
    52 0000029C 83E03F              <1>     and ax, 0x3F ; 実際にアクセス可能な最終セクタが帰ってくる。セクタは1から番号がはじまるので
    53                              <1>                  ; 最終地点の番号がそのままセクタ数
    54                              <1> 
    55 0000029F C0E906              <1>     shr cl, 6 ; シリンダ数の上位2ビット
    56 000002A2 C1C908              <1>     ror cx, 8 ; axレジスタのビットを右に8ビット回転させる <=> CH[1:0]CL = シリンダ数
    57 000002A5 41                  <1>     inc cx ; 実際にアクセス可能な最終シリンダが帰ってくるので、＋１でシリンダ数になる
    58                              <1> 
    59 000002A6 0FB6DE              <1>     movzx bx, dh ; ヘッド数
    60 000002A9 43                  <1>     inc bx ; 実際にアクセス可能な最終ヘッダ番号が帰ってくるので＋１でヘッダ数になる
    61                              <1> 
    62 000002AA 894C02              <1>     mov [si + drive.cyln], cx
    63 000002AD 895C04              <1>     mov [si + drive.head], bx
    64 000002B0 894406              <1>     mov [si + drive.sect], ax
    65                              <1> 
    66 000002B3 EB03                <1>     jmp .10E
    67                              <1> 
    68                              <1> .10F:
    69 000002B5 B80000              <1>     mov ax, 0
    70                              <1> 
    71                              <1> .10E:
    72                              <1>     ; レジスタの復帰
    73 000002B8 5F                  <1>     pop di
    74 000002B9 5E                  <1>     pop si
    75 000002BA 07                  <1>     pop es
    76 000002BB 59                  <1>     pop cx
    77 000002BC 5B                  <1>     pop bx
    78                              <1> 
    79                              <1>     ; スタックフレームの破棄
    80 000002BD 89EC                <1>     mov sp, bp
    81 000002BF 5D                  <1>     pop bp
    82                              <1> 
    83 000002C0 C3                  <1>     ret
    90                                  
    91                                  ; ****************************
    92                                  ; ブート処理の第2ステージ
    93                                  ; ****************************
    94                                  stage_2:
    95                                  
    96                                      ; 文字列を表示
    97 000002C1 68[3B03]E8FBFD83C4-         cdecl puts, .s0
    97 000002C9 02                 
    98                                  
    99                                      ; ドライブ情報を取得
   100 000002CA 68[BA00]E8B0FF83C4-         cdecl get_drive_param, BOOT + drive
   100 000002D2 02                 
   101 000002D3 83F800                      cmp ax, 0
   102                                  .10Q:
   103 000002D6 750C                        jne .10E
   104                                  .10T:
   105 000002D8 68[7103]E8E4FD83C4-         cdecl puts, .e0
   105 000002E0 02                 
   106 000002E1 E8FDFD                      call reboot
   107                                  .10E:
   108                                      ; ドライブ情報の表示
   109 000002E4 A1[BA00]                    mov ax, [BOOT + drive.no]
   110 000002E7 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100
   110 000002EE [5303]50E80CFF83C4-
   110 000002F6 0A                 
   111 000002F7 A1[BC00]                    mov ax, [BOOT + drive.cyln]
   112 000002FA 6A046A106A0268-             cdecl itoa, ax, .p2, 2, 16, 0b0100
   112 00000301 [5B03]50E8F9FE83C4-
   112 00000309 0A                 
   113 0000030A A1[BE00]                    mov ax, [BOOT + drive.head]
   114 0000030D 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100
   114 00000314 [6403]50E8E6FE83C4-
   114 0000031C 0A                 
   115 0000031D A1[C000]                    mov ax, [BOOT + drive.sect]
   116 00000320 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100
   116 00000327 [6C03]50E8D3FE83C4-
   116 0000032F 0A                 
   117 00000330 68[4A03]E88CFD83C4-         cdecl puts, .s1
   117 00000338 02                 
   118                                  
   119                                  
   120                                      ; 処理の終了
   121 00000339 EBFE                        jmp $
   122                                  
   123                                  .s0:
   124 0000033B 326E64207374616765-         db "2nd stage...", 0x0A, 0x0D, 0
   124 00000344 2E2E2E0A0D00       
   125                                  .s1:
   126 0000034A 2044726976653A3078          db " Drive:0x"
   127                                  .p1:
   128 00000353 20202C20433A3078            db "  , C:0x"
   129                                  .p2:
   130 0000035B 2020202C20483A3078          db "   , H:0x"
   131                                  .p3:
   132 00000364 20202C20533A3078            db "  , S:0x"
   133                                  .p4:
   134 0000036C 20200A0D00                  db "  ", 0x0A, 0x0D, 0
   135                                  
   136                                  .e0:
   137 00000371 43616E277420676574-         db "Can't get drive parameter.", 0
   137 0000037A 206472697665207061-
   137 00000383 72616D657465722E00 
   138                                  
   139                                  ; ****************************
   140                                  ; padding (このファイルは8kバイトとする)
   141                                  ; ****************************
   142 0000038C 00<rept>                    times BOOT_SIZE - ($ - $$) db 0
